{"version":3,"sources":["Class.js","Observable.js","crypto/CryptoLib.js","network/NetworkUtils.js","database/BaseTypedDB.js","database/TypedDB.js","utils/WindowDetector.js","wallet/WalletStore.js","network/websocket/WebSocketConnector.js","network/webrtc/WebRtcCertificate.js","network/webrtc/WebRtcConfig.js","network/webrtc/WebRtcConnector.js","Services.js","Synchronizer.js","Timers.js","array/ArrayUtils.js","array/IndexedArray.js","buffer/BufferUtils.js","buffer/SerialBuffer.js","crypto/Crypto.js","database/ObjectDB.js","database/TypedDBTransaction.js","number/NumberUtils.js","object/ObjectUtils.js","platform/PlatformUtils.js","string/StringUtils.js","Primitive.js","Hash.js","PrivateKey.js","PublicKey.js","Signature.js","BlockHeader.js","BlockBody.js","BlockUtils.js","InvVector.js","NetAddress.js","Message.js","AddrMessage.js","BlockMessage.js","GetAddrMessage.js","GetBlocksMessage.js","InventoryMessage.js","MempoolMessage.js","PingMessage.js","PongMessage.js","RejectMessage.js","SignalMessage.js","TxMessage.js","VerAckMessage.js","VersionMessage.js","Address.js","Core.js","consensus/Consensus.js","consensus/ConsensusAgent.js","consensus/Policy.js","miner/Miner.js","network/Network.js","network/NetworkAgent.js","network/Peer.js","network/PeerAddresses.js","network/PeerChannel.js","network/PeerConnection.js","wallet/Wallet.js","consensus/block/Block.js","consensus/account/Accounts.js","consensus/account/AccountsTree.js","consensus/account/AccountsTreeStore.js","consensus/account/Balance.js","consensus/blockchain/Blockchain.js","consensus/blockchain/BlockchainStore.js","consensus/mempool/Mempool.js","consensus/transaction/Transaction.js","network/message/MessageFactory.js"],"names":["Class","register","Observable","WILDCARD","constructor","_listeners","on","type","callback","push","fire","arguments","length","args","Array","prototype","slice","call","listener","apply","bubble","observable","types","bind","CryptoLib","instance","window","crypto","subtle","self","NetworkUtils","mySignalId","_mySignalId","Math","round","random","NumberUtils","UINT64_MAX","myNetAddress","NetAddress","Services","myServices","Date","now","configureNetAddress","BaseTypedDB","db","_db","resolve","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","OIDBTransaction","msIDBTransaction","dbVersion","request","open","error","onsuccess","event","result","onupgradeneeded","target","createObjectStore","tableName","_tableName","_type","_get","key","then","getTx","transaction","objectStore","get","onerror","_put","value","putTx","put","getObject","cast","putObject","getString","putString","delete","deleteTx","nativeTransaction","NativeDBTransaction","_tx","_store","oncomplete","e","commit","TypedDB","_cache","undefined","updateCache","values","flushCache","keys","TypedDBTransaction","WindowDetector","KEY_PING","KEY_PONG","KEY_BYE","_instance","addEventListener","_pong","newValue","_bye","isSingleWindow","reject","nonce","timeout","setTimeout","removeEventListener","clearTimeout","_ping","waitForSingleWindow","fnReady","fnWait","singleWindow","localStorage","setItem","WalletStore","WebSocketConnector","connect","peerAddress","isWebSocket","services","ws","WebSocket","host","port","onopen","conn","PeerConnection","Protocol","WEBSOCKET","RTCPeerConnection","webkitRTCPeerConnection","WebRtcCertificate","generateCertificate","name","namedCurve","cert","WebRtcConfig","certificate","iceServers","urls","certificates","WebRtcConnector","CONNECT_TIMEOUT","_init","_connectors","_config","_timers","Timers","isWebRtc","signalId","console","warn","connector","OutgoingPeerConnector","signalChannel","_onConnection","onSignal","channel","msg","payload","JSON","parse","BufferUtils","toAscii","senderId","recipientId","log","IncomingPeerConnector","_onClose","PeerConnector","config","remoteId","_signalChannel","_remoteId","_rtcConnection","onicecandidate","_onIceCandidate","signal","sdp","setRemoteDescription","RTCSessionDescription","createAnswer","_onDescription","_errorLog","candidate","addIceCandidate","RTCIceCandidate","catch","_signal","fromAscii","description","setLocalDescription","_onP2PChannel","WEBRTC","_getPeerId","desc","remoteDescription","sdpToPeerId","match","replace","createDataChannel","binaryType","createOffer","offer","ondatachannel","PlatformUtils","isBrowser","myServiceMask","serviceMask","Synchronizer","_queue","_working","fn","_doWork","job","shift","working","_timeouts","_intervals","waitTime","resetTimeout","setInterval","intervalTime","clearInterval","resetInterval","clearAll","ArrayUtils","randomElement","arr","floor","subarray","uintarr","begin","end","clamp","v","min","max","byteLength","len","Uint8Array","buffer","byteOffset","IndexedArray","array","ignoreDuplicates","_array","_ignoreDuplicates","_index","_buildIndex","Proxy","i","isNaN","pop","index","indexOf","isEmpty","start","String","fromCharCode","string","buf","charCodeAt","toBase64","btoa","fromBase64","base64","from","atob","c","toBase64Clean","toHex","map","x","toString","join","concatTypedArrays","a","b","set","concat","equals","viewA","viewB","SerialBuffer","arg","_view","DataView","_readPos","_writePos","readPos","writePos","read","write","readUint8","getUint8","writeUint8","setUint8","readUint16","getUint16","writeUint16","setUint16","readUint32","getUint32","writeUint32","setUint32","readUint64","getFloat64","writeUint64","setFloat64","readFixLengthString","bytes","view","writeFixLengthString","StringUtils","isMultibyte","padding","readVarLengthString","writeVarLengthString","isUint8","Crypto","lib","settings","hashAlgo","signAlgo","curve","sign","hash","sha256","digest","Hash","generateKeys","generateKey","exportPrivate","privateKey","exportKey","importPrivate","importKey","exportPublic","publicKey","format","PublicKey","exportAddress","publicToAddress","importPublic","address","Address","data","Signature","verify","signature","ObjectDB","obj","tx","that","superDelete","_objects","_strings","_deletions","val","UINT8_MAX","isUint16","UINT16_MAX","isUint32","UINT32_MAX","isUint64","ObjectUtils","o","clazz","__proto__","str","test","Primitive","_enforceLength","ArrayBuffer","SERIALIZED_SIZE","unserialize","serialize","serializedSize","isHash","PrivateKey","toAddress","BlockHeader","prevHash","bodyHash","accountsHash","nBits","timestamp","BlockUtils","isValidCompact","_prevHash","_bodyHash","_accountsHash","_nBits","_timestamp","_nonce","_hash","verifyProofOfWork","isProofOfWork","compactToTarget","difficulty","compactToDifficulty","n","BlockBody","minerAddr","transactions","some","it","Transaction","_minerAddr","_transactions","forEach","numTransactions","size","_computeRoot","mid","left","right","all","hashes","every","transactionCount","compact","targetToCompact","base16","parseInt","substr","numBytes","Policy","BLOCK_TARGET_MAX","difficultyToCompact","difficultyToTarget","targetToDifficulty","isValidTarget","InvVector","fromBlock","block","Type","BLOCK","fromTransaction","TRANSACTION","ERROR","distance","_services","_host","_port","_signalId","_distance","Message","peekType","pos","magic","MAGIC","checksum","_length","_checksum","_magic","VERSION","VERACK","INV","GETDATA","NOTFOUND","GETBLOCKS","GETHEADERS","TX","HEADERS","MEMPOOL","REJECT","ADDR","GETADDR","PING","PONG","SIGNAL","SENDHEADERS","GETBALANCES","BALANCES","AddrMessage","addresses","_addresses","count","addr","BlockMessage","_block","Block","GetAddrMessage","_serviceMask","GetBlocksMessage","hashStop","_hashes","_hashStop","BaseInventoryMessage","vectors","_vectors","vector","InvMessage","GetDataMessage","NotFoundMessage","MempoolMessage","PingMessage","PongMessage","RejectMessage","messageType","code","reason","extraData","_messageType","_code","_reason","_extraData","Code","DUPLICATE","SignalMessage","_senderId","_recipientId","_payload","TxMessage","_transaction","VerAckMessage","VersionMessage","version","netAddress","startHeight","_version","_netAddress","_startHeight","Core","init","fnSuccess","fnError","Accounts","getPersistent","accounts","Blockchain","blockchain","mempool","Mempool","Network","network","consensus","Consensus","Wallet","wallet","miner","Miner","SYNC_THROTTLE","_blockchain","_mempool","_agents","_syncing","_established","peer","_onPeerJoined","_onPeerLeft","head","peerId","relayBlock","relayTransaction","agent","ConsensusAgent","_syncBlockchain","bestHeight","bestAgent","synced","height","totalWork","headHash","_onPeerSynced","syncBlockchain","established","REQUEST_THRESHOLD","REQUEST_THROTTLE","REQUEST_TIMEOUT","MAX_SYNC_ATTEMPTS","_peer","_synced","_lastChainHeight","_failedSyncs","_knownObjects","_objectsToRequest","_objectsInFlight","_onInv","_onGetData","_onNotFound","_onBlock","_onTx","_onGetBlocks","_onMempool","inv","busy","_requestBlocks","close","step","path","GENESIS","HASH","getblocks","unknownObjects","getBlock","getTransaction","_requestData","getdata","_noMoreData","_onObjectReceived","pushBlock","pushTransaction","notfound","mainPath","startIndex","stopIndex","getTransactions","SATOSHIS_PER_COIN","BLOCK_TIME","BLOCK_REWARD","coinsToSatoshis","BLOCK_SIZE_MAX","DIFFICULTY_ADJUSTMENT_BLOCKS","coins","satoshisToCoins","satoshis","minerAddress","_address","_hashCount","_lastHashrate","_hashrateWorker","_hashrate","_startWork","startWork","_updateHashrate","_getNextBlock","header","_mine","isPoW","_getNextBody","body","_getNextHeader","_getNextTimestamp","getNextCompactTarget","stopWork","elapsed","hashrate","PEER_COUNT_DESIRED","PEER_COUNT_MAX","_autoConnect","_peerCount","_activeAddresses","PeerAddresses","relayAddresses","_wsConnector","_onError","peerAddr","_rtcConnector","_checkPeerCount","disconnect","disconnectWebSocket","candidates","findByServices","filter","_connect","_maxPeerCount","PeerChannel","_onSignal","NetworkAgent","_onHandshake","_onAddr","deleteBySignalChannel","connection","findBySignalId","peerCount","peerCountWebSocket","reduce","protocol","peerCountWebRtc","bytesReceived","bytesSent","HANDSHAKE_TIMEOUT","PING_TIMEOUT","GETADDR_TIMEOUT","CONNECTIVITY_INTERVAL","ANNOUNCE_ADDR_INTERVAL","_channel","_connected","_knownAddresses","_onVersion","_onVerAck","_onGetAddr","_onPing","_onPong","_handshake","unknownAddresses","_canAcceptMessage","verack","Peer","_checkConnectivity","_requestAddresses","getaddr","ping","pong","isHandshakeMsg","accept","MAX_AGE_WEBSOCKET","MAX_AGE_WEBRTC","MAX_DISTANCE","CLEANUP_INTERVAL","SEED_PEERS","_cleanup","netAddresses","newAddresses","_exceedsAge","knownAddr","PeerAddress","age","_conn","_onMessage","rawMsg","MessageFactory","_send","send","nativeChannel","_protocol","_bytesReceived","_bytesSent","onmessage","onclose","Blob","reader","FileReader","onloadend","readAsArrayBuffer","createVolatile","_keys","_accounts","_publicKey","createTransaction","recipientAddr","fee","_signTransaction","serializeContent","transferFunds","getBalance","balance","_header","_body","AccountsTree","tree","accountsTree","_tree","commitBlock","treeTx","_execute","revertBlock","operator","_executeTransactions","_rewardMiner","op","txFees","sum","_updateBalance","_executeTransaction","_updateSender","_updateRecipient","senderAddr","Balance","newNonce","newBalance","root","store","AccountsTreeStore","treeStore","_synchronizer","_initRoot","getRootKey","rootKey","AccountsTreeNode","setRootKey","_","rootNode","_insert","node","rootPath","commonPrefix","_commonPrefix","prefix","nodeKey","newChild","newChildKey","newParent","putChild","newParentKey","_updateKeys","INITIAL","_prune","childKey","getChild","childNode","removeChild","hasChildren","_retrieve","arr1","arr2","children","prefixLength","childCount","childIndex","child","PersistentAccountsTreeStore","VolatileAccountsTreeStore","_rootKey","_value","BlockchainStore","BLOCK_TIMESTAMP_DRIFT_MAX","_mainChain","_mainPath","_headHash","getMainChain","Chain","setMainChain","_fetchPath","maxBlocks","prevChain","unshift","_pushBlock","knownChain","_verifyBlock","_isValidExtension","newChain","_extend","_rebranch","senderPubKeys","senderPubKey","verifySignature","chain","nextCompactTarget","_revert","forkHead","forkChain","commonAncestor","startHash","startChain","actualTime","expectedTime","adjustment","currentTarget","nextTarget","_head","_totalWork","_height","PersistentBlockchainStore","VolatileBlockchainStore","mainChain","_senderPubKeys","_evictTransactions","_verifyTransaction","maxCount","_verifyTransactionBalance","quiet","senderBalance","_senderPubKey","_recipientAddr","_fee","_signature","serializedContentSize","sig","CLASSES"],"mappings":"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","file":"nimiq.js","sourcesContent":["class Class {\n    static register() {\n        // Required for our custom NodeJS isomorphism\n    }\n}\n","class Observable {\n    static get WILDCARD() {\n        return '*';\n    }\n\n    constructor() {\n        this._listeners = {};\n    }\n\n    on(type, callback) {\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(callback);\n    }\n\n    fire() {\n        if (!arguments.length) throw 'Obserable.fire() needs type argument';\n\n        // Notify listeners for this event type.\n        const type = arguments[0];\n        if (this._listeners[type]) {\n            const args = Array.prototype.slice.call(arguments, 1);\n            for (let listener of this._listeners[type]) {\n                listener.apply(null, args);\n            }\n        }\n\n        // Notify wildcard listeners. Pass event type as first argument\n        if (this._listeners[Observable.WILDCARD]) {\n            for (let listener of this._listeners[Observable.WILDCARD]) {\n                listener.apply(null, arguments);\n            }\n        }\n    }\n\n    bubble() {\n        if (arguments.length < 2) throw 'Obserable.bubble() needs observable and at least 1 type argument';\n\n        const observable = arguments[0];\n        const types = Array.prototype.slice.call(arguments, 1);\n        for (let type of types) {\n            let callback;\n            if (type == Observable.WILDCARD) {\n                callback = function() {\n                    this.fire.apply(this, arguments);\n                };\n            } else {\n                callback = function() {\n                    this.fire.apply(this, [type, ...arguments]);\n                };\n            }\n            observable.on(type, callback.bind(this));\n        }\n    }\n}\nClass.register(Observable);\n","class CryptoLib {\n    static get instance() {\n        return typeof window !== 'undefined' ?\n            window.crypto.subtle : self.crypto.subtle;\n    }\n}\n","class NetworkUtils {\n    static mySignalId() {\n        if (!NetworkUtils._mySignalId) {\n            NetworkUtils._mySignalId = Math.round(Math.random() * NumberUtils.UINT64_MAX) + 1;\n        }\n        return NetworkUtils._mySignalId;\n    }\n\n    static myNetAddress() {\n        return new NetAddress(Services.myServices(), Date.now(),\n            /*host*/ \"\", /*port*/ 0,\n            NetworkUtils.mySignalId(), /*distance*/ 0);\n    }\n\n    static configureNetAddress() {\n        // Ignored on browser platform.\n    }\n}\n","class BaseTypedDB {\n    static get db() {\n        if (BaseTypedDB._db) return Promise.resolve(BaseTypedDB._db);\n\n        const indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\n        const IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction;\n        const dbVersion = 1;\n        const request = indexedDB.open('lovicash', dbVersion);\n\n        return new Promise((resolve,error) => {\n            request.onsuccess = event => {\n                BaseTypedDB._db = request.result;\n                resolve(request.result);\n            };\n\n            request.onupgradeneeded = event => {\n                const db = event.target.result;\n                db.createObjectStore('accounts');\n                db.createObjectStore('blocks');\n                db.createObjectStore('certificate');\n                db.createObjectStore('wallet');\n            };\n        });\n    }\n\n    constructor(tableName, type) {\n        this._tableName = tableName;\n        this._type = type;\n    }\n\n    _get(key) {\n        return BaseTypedDB.db.then( db => new Promise( (resolve,error) => {\n            const getTx = db.transaction([this._tableName])\n                .objectStore(this._tableName)\n                .get(key);\n            getTx.onsuccess = event => resolve(event.target.result);\n            getTx.onerror = error;\n        }));\n    }\n\n    _put(key, value) {\n        return BaseTypedDB.db.then( db => new Promise( (resolve,error) => {\n            const putTx = db.transaction([this._tableName], 'readwrite')\n                .objectStore(this._tableName)\n                .put(value, key);\n            putTx.onsuccess = event => resolve(event.target.result);\n            putTx.onerror = error;\n        }));\n    }\n\n    getObject(key) {\n        return this._get(key)\n            .then( value => this._type && this._type.cast && !(value instanceof this._type) ? this._type.cast(value) : value);\n    }\n\n    putObject(key, value) {\n        return this._put(key, value);\n    }\n\n    getString(key) {\n        return this._get(key);\n    }\n\n    putString(key, value) {\n        return this._put(key, value);\n    }\n\n    delete(key) {\n        return BaseTypedDB.db.then(db => new Promise( (resolve, error) => {\n            const deleteTx = db.transaction([this._tableName], 'readwrite')\n                .objectStore(this._tableName)\n                .delete(key);\n            deleteTx.onsuccess = event => resolve(event.target.result);\n            deleteTx.onerror = error;\n        }));\n    }\n\n    nativeTransaction() {\n        return BaseTypedDB.db.then( db => new NativeDBTransaction(db, this._tableName));\n    }\n}\n\nclass NativeDBTransaction extends Observable {\n    constructor(db, tableName) {\n        super();\n        this._tx = db.transaction([tableName], 'readwrite');\n        this._store = this._tx.objectStore(tableName);\n\n        this._tx.oncomplete = () => this.fire('complete');\n        this._tx.onerror = e => this.fire('error', e);\n    }\n\n    putObject(key, value) {\n        this._store.put(value, key);\n    }\n\n    putString(key, value) {\n        this._store.put(value, key);\n    }\n\n    delete(key) {\n        this._store.delete(key);\n    }\n\n    commit() {\n        // no-op on IndexedDB\n    }\n}\n","class TypedDB extends BaseTypedDB {\n    constructor(tableName, type) {\n        super(tableName, type);\n        this._cache = {};\n    }\n\n    async getObject(key) {\n        if (this._cache[key] === undefined) {\n            this._cache[key] = await BaseTypedDB.prototype.getObject.call(this, key);\n        }\n        return this._cache[key];\n    }\n\n    putObject(key, value) {\n        this._cache[key] = value;\n        return super.putObject(key, value);\n    }\n\n    async getString(key) {\n        if (this._cache[key] === undefined) {\n            this._cache[key] = await BaseTypedDB.prototype.getString.call(this, key);\n        }\n        return this._cache[key];\n    }\n\n    putString(key, value) {\n        this._cache[key] = value;\n        return super.putString(key, value);\n    }\n\n    delete(key) {\n        delete this._cache[key];\n        return super.delete(key);\n    }\n\n    updateCache(values) {\n        for (let key in values) {\n            this._cache[key] = values[key];\n        }\n    }\n\n    flushCache(keys) {\n        if (!keys) {\n            this._cache = {};\n        } else {\n            for (let key of keys) {\n                delete this._cache[key];\n            }\n        }\n    }\n\n    transaction() {\n        return new TypedDBTransaction(this);\n    }\n}\n","class WindowDetector {\n    static get KEY_PING() {\n        return 'WindowDetector.PING';\n    }\n\n    static get KEY_PONG() {\n        return 'WindowDetector.PONG';\n    }\n\n    static get KEY_BYE() {\n        return 'WindowDetector.BYE';\n    }\n\n    // Singleton\n    static get() {\n        if (!WindowDetector._instance) {\n            WindowDetector._instance = new WindowDetector();\n        }\n        return WindowDetector._instance;\n    }\n\n    constructor() {\n        window.addEventListener('storage', e => {\n            if (e.key === WindowDetector.KEY_PING) {\n                this._pong(e.newValue);\n            }\n        });\n        window.addEventListener('unload', e => {\n            this._bye();\n        });\n    }\n\n    isSingleWindow() {\n        return new Promise( (resolve, reject) => {\n            const nonce = Math.round(Math.random() * Number.MAX_SAFE_INTEGER);\n            const timeout = setTimeout( () => {\n                window.removeEventListener('storage', listener);\n                resolve(true);\n            }, 100);\n\n            const listener = e => {\n                if (e.key === WindowDetector.KEY_PONG && e.newValue == nonce) {\n                    clearTimeout(timeout);\n\n                    window.removeEventListener('storage', listener);\n                    resolve(false);\n                }\n            };\n            window.addEventListener('storage', listener);\n\n            this._ping(nonce);\n        });\n    }\n\n    waitForSingleWindow(fnReady, fnWait) {\n        this.isSingleWindow().then( singleWindow => {\n            if (singleWindow) {\n                fnReady();\n            } else {\n                if (fnWait) fnWait();\n\n                const listener = e => {\n                    if (e.key === WindowDetector.KEY_BYE) {\n                        window.removeEventListener('storage', listener);\n                        // Don't pass fnWait, we only want it to be called once.\n                        this.waitForSingleWindow(fnReady, /*fnWait*/ undefined);\n                    }\n                };\n                window.addEventListener('storage', listener);\n            }\n        });\n    }\n\n    _ping(nonce) {\n        localStorage.setItem(WindowDetector.KEY_PING, nonce);\n    }\n\n    _pong(nonce) {\n        localStorage.setItem(WindowDetector.KEY_PONG, nonce);\n    }\n\n    _bye() {\n        localStorage.setItem(WindowDetector.KEY_BYE, Date.now());\n    }\n}\nWindowDetector._instance = null;\n","class WalletStore extends TypedDB {\n    constructor() {\n        super('wallet');\n    }\n\n    get(key) {\n        return super.getObject(key);\n    }\n\n    put(key, value) {\n        return super.putObject(key, value);\n    }\n}\n","class WebSocketConnector extends Observable {\n    constructor() {\n        super();\n    }\n\n    connect(peerAddress) {\n        if (!Services.isWebSocket(peerAddress.services)) throw 'Malformed peerAddress';\n\n        const ws = new WebSocket('wss://' + peerAddress.host + ':' + peerAddress.port);\n        ws.onopen = () => {\n            const conn = new PeerConnection(ws, PeerConnection.Protocol.WEBSOCKET, peerAddress.host, peerAddress.port);\n            this.fire('connection', conn);\n        };\n        ws.onerror = e => this.fire('error', peerAddress, e);\n    }\n}\n","// TODO V2: should be a singleton\n// TODO V2: should cache the certificate in it's scope\nwindow.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\nclass WebRtcCertificate {\n    static get() {\n        // TODO the certificate is going to expire eventually. Automatically renew it.\n        const db = new TypedDB('certificate');\n        return db.getObject('certKey').then(value => {\n            if (value) return value;\n            return RTCPeerConnection.generateCertificate({\n                name: 'ECDSA',\n                namedCurve: 'P-256'\n            })\n                .then(cert => {\n                    db.putObject('certKey', cert);\n                    return cert;\n                });\n        });\n    }\n}\n","class WebRtcConfig {\n    static async get() {\n        const certificate = await WebRtcCertificate.get();\n        return {\n            iceServers: [\n                { urls: 'stun:stun.services.mozilla.com' },\n                { urls: 'stun:stun.l.google.com:19302' }\n            ],\n            certificates : [certificate]\n        };\n    }\n}\n","class WebRtcConnector extends Observable {\n    static get CONNECT_TIMEOUT() {\n        return 20000; // ms\n    }\n\n    constructor() {\n        super();\n        return this._init();\n    }\n\n    async _init() {\n        this._connectors = {};\n        this._config = await WebRtcConfig.get();\n        this._timers = new Timers();\n        return this;\n    }\n\n    connect(peerAddress) {\n        if (!Services.isWebRtc(peerAddress.services)) throw 'Malformed peerAddress';\n        const signalId = peerAddress.signalId;\n\n        if (this._connectors[signalId]) {\n            console.warn('WebRtc: Already connecting/connected to ' + signalId);\n            return;\n        }\n\n        const connector = new OutgoingPeerConnector(this._config, peerAddress.signalChannel, signalId);\n        connector.on('connection', conn => this._onConnection(conn, signalId));\n        this._connectors[signalId] = connector;\n\n        this._timers.setTimeout('connect_' + signalId, () => {\n            delete this._connectors[signalId];\n            this.fire('error', peerAddress);\n        }, WebRtcConnector.CONNECT_TIMEOUT);\n    }\n\n    onSignal(channel, msg) {\n        let payload;\n        try {\n            payload = JSON.parse(BufferUtils.toAscii(msg.payload));\n        } catch (e) {\n            console.error('Failed to parse signal payload from ' + msg.senderId, msg);\n            return;\n        }\n\n        if (!payload) {\n            console.warn('Discarding signal from ' + msg.senderId + ' - empty payload', msg);\n            return;\n        }\n\n        if (payload.type == 'offer') {\n            // Check if we have received an offer on an ongoing connection.\n            // This can happen if two peers initiate connections to one another\n            // simultaneously. Resolve this by having the peer with the higher\n            // signalId discard the offer while the one with the lower signalId\n            // accepts it.\n            if (this._connectors[msg.senderId]) {\n                if (msg.recipientId > msg.senderId) {\n                    // Discard the offer.\n                    console.log('Simultaneous connection, discarding offer from ' + msg.senderId + ' (<' + msg.recipientId + ')');\n                    return;\n                } else {\n                    // We are going to accept the offer. Clear the connect timeout\n                    // from our previous outgoing connection attempt to this peer.\n                    console.log('Simultaneous connection, accepting offer from ' + msg.senderId + ' (>' + msg.recipientId + ')');\n                    this._timers.clearTimeout('connect_' + msg.senderId);\n                }\n            }\n\n            // Accept the offer.\n            const connector = new IncomingPeerConnector(this._config, channel, msg.senderId, payload);\n            connector.on('connection', conn => this._onConnection(conn, msg.senderId));\n            this._connectors[msg.senderId] = connector;\n\n            this._timers.setTimeout('connect_' + msg.senderId, () => {\n                delete this._connectors[msg.senderId];\n            }, WebRtcConnector.CONNECT_TIMEOUT);\n        }\n\n        // If we are already establishing a connection with the sender of this\n        // signal, forward it to the corresponding connector.\n        else if (this._connectors[msg.senderId]) {\n            this._connectors[msg.senderId].onSignal(payload);\n        }\n\n        // Invalid signal.\n        else {\n            console.warn('WebRtc: Discarding invalid signal received from ' + msg.senderId + ' via ' + channel + ': ' + BufferUtils.toAscii(msg.payload));\n        }\n    }\n\n    _onConnection(conn, signalId) {\n        // Clear the connect timeout.\n        this._timers.clearTimeout('connect_' + signalId);\n\n        // Clean up when this connection closes.\n        conn.on('close', () => this._onClose(signalId));\n\n        // Tell listeners about the new connection.\n        this.fire('connection', conn);\n    }\n\n    _onClose(signalId) {\n        delete this._connectors[signalId];\n    }\n}\n\nclass PeerConnector extends Observable {\n    constructor(config, signalChannel, remoteId) {\n        super();\n        this._signalChannel = signalChannel;\n        this._remoteId = remoteId;\n\n        this._rtcConnection = new RTCPeerConnection(config);\n        this._rtcConnection.onicecandidate = e => this._onIceCandidate(e);\n    }\n\n    onSignal(signal) {\n        if (signal.sdp) {\n            this._rtcConnection.setRemoteDescription(new RTCSessionDescription(signal)).then(() => {\n                if (signal.type == 'offer') {\n                    this._rtcConnection.createAnswer(this._onDescription.bind(this), this._errorLog);\n                }\n            });\n        } else if (signal.candidate) {\n            this._rtcConnection.addIceCandidate(new RTCIceCandidate(signal))\n                .catch(e => e);\n        }\n    }\n\n    _signal(signal) {\n        this._signalChannel.signal(\n            NetworkUtils.mySignalId(),\n            this._remoteId,\n            BufferUtils.fromAscii(JSON.stringify(signal))\n        );\n    }\n\n    _onIceCandidate(event) {\n        if (event.candidate != null) {\n            this._signal(event.candidate);\n        }\n    }\n\n    _onDescription(description) {\n        this._rtcConnection.setLocalDescription(description, () => {\n            this._signal(description);\n        }, this._errorLog);\n    }\n\n    _onP2PChannel(event) {\n        const channel = event.channel || event.target;\n        // TODO extract ip & port from session description\n        // XXX Use \"peerId\" as host in the meantime.\n        const host = this._remoteId;\n        const port = 420;\n        const conn = new PeerConnection(channel, PeerConnection.Protocol.WEBRTC, host, port);\n        this.fire('connection', conn);\n    }\n\n    _errorLog(error) {\n        console.error(error);\n    }\n\n    // deprecated\n    _getPeerId() {\n        const desc = this._rtcConnection.remoteDescription;\n        return PeerConnector.sdpToPeerId(desc.sdp);\n    }\n\n    // deprecated\n    static sdpToPeerId(sdp) {\n        return sdp\n            .match('fingerprint:sha-256(.*)\\r\\n')[1]\t// parse fingerprint\n            .replace(/:/g, '') \t\t\t\t\t\t\t// replace colons\n            .slice(1, 32); \t\t\t\t\t\t\t\t// truncate hash to 16 bytes\n    }\n}\n\nclass OutgoingPeerConnector extends PeerConnector {\n    constructor(config, signalChannel, remoteId) {\n        super(config, signalChannel, remoteId);\n\n        // Create offer.\n        const channel = this._rtcConnection.createDataChannel('data-channel');\n        channel.binaryType = 'arraybuffer';\n        channel.onopen = e => this._onP2PChannel(e);\n        this._rtcConnection.createOffer(this._onDescription.bind(this), this._errorLog);\n    }\n\n}\n\nclass IncomingPeerConnector extends PeerConnector {\n    constructor(config, signalChannel, remoteId, offer) {\n        super(config, signalChannel, remoteId);\n        this._rtcConnection.ondatachannel = e => this._onP2PChannel(e);\n        this.onSignal(offer);\n    }\n}\n","class Services {\n    // XXX Temporary stub, needs to be configurable later on.\n    static myServices() {\n        // If we are running in a browser, we support WebRTC, WebSocket otherwise.\n        // TODO legacy browsers w/o webrtc\n        return PlatformUtils.isBrowser() ? Services.WEBRTC : Services.WEBSOCKET;\n    }\n\n    // Used for filtering peer addresses by services.\n    // XXX cleanup\n    static myServiceMask() {\n        // Always get WebSocket peers. If we are in a browser, get WebRTC peers as well.\n        let serviceMask = Services.WEBSOCKET;\n        if (PlatformUtils.isBrowser()) {\n            serviceMask |= Services.WEBRTC;\n        }\n        return serviceMask;\n    }\n\n    static isWebSocket(services) {\n        return (services & Services.WEBSOCKET) !== 0;\n    }\n\n    static isWebRtc(services) {\n        return (services & Services.WEBRTC) !== 0;\n    }\n}\nServices.WEBSOCKET = 1;\nServices.WEBRTC = 2;\nClass.register(Services);\n","class Synchronizer extends Observable {\n    constructor() {\n        super();\n        this._queue = [];\n        this._working = false;\n    }\n\n    push(fn, resolve, error) {\n        this._queue.push({fn: fn, resolve: resolve, error: error});\n        if (!this._working) {\n            this._doWork();\n        }\n    }\n\n    async _doWork() {\n        this._working = true;\n        this.fire('work-start', this);\n\n        while (this._queue.length) {\n            const job = this._queue.shift();\n            try {\n                const result = await job.fn();\n                job.resolve(result);\n            } catch (e) {\n                if (job.error) job.error(e);\n            }\n        }\n\n        this._working = false;\n        this.fire('work-end', this);\n    }\n\n    get working() {\n        return this._working;\n    }\n}\nClass.register(Synchronizer);\n","class Timers {\n    constructor() {\n        this._timeouts = {};\n        this._intervals = {};\n    }\n\n    setTimeout(key, fn, waitTime) {\n        if (this._timeouts[key]) throw 'Duplicate timeout for key ' + key;\n        this._timeouts[key] = setTimeout(fn, waitTime);\n    }\n\n    clearTimeout(key) {\n        clearTimeout(this._timeouts[key]);\n        delete this._timeouts[key];\n    }\n\n    resetTimeout(key, fn, waitTime) {\n        clearTimeout(this._timeouts[key]);\n        this._timeouts[key] = setTimeout(fn, waitTime);\n    }\n\n    setInterval(key, fn, intervalTime) {\n        if (this._intervals[key]) throw 'Duplicate interval for key ' + key;\n        this._intervals[key] = setInterval(fn, intervalTime);\n    }\n\n    clearInterval(key) {\n        clearInterval(this._intervals[key]);\n        delete this._intervals[key];\n    }\n\n    resetInterval(key, fn, intervalTime) {\n        clearInterval(this._intervals[key]);\n        this._intervals[key] = setInterval(fn, intervalTime);\n    }\n\n    clearAll() {\n        for (const key in this._timeouts) {\n            this.clearTimeout(key);\n        }\n        for (const key in this._intervals) {\n            this.clearInterval(key);\n        }\n    }\n}\nClass.register(Timers);\n","class ArrayUtils {\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n}\nClass.register(ArrayUtils);\n","class IndexedArray {\n    constructor(array, ignoreDuplicates) {\n        this._array = array || new Array();\n        this._ignoreDuplicates = ignoreDuplicates;\n\n        this._index = {};\n        this._buildIndex();\n\n        return new Proxy(this._array, this);\n    }\n\n    _buildIndex() {\n        for (let i = 0; i < this._array.length; ++i) {\n            this._index[this._array[i]] = i;\n        }\n    }\n\n    get(target, key) {\n        if (typeof key == 'symbol') {\n            return undefined;\n        }\n\n        // Forward index access (e.g. arr[5]) to underlying array.\n        if (!isNaN(key)) {\n            return target[key];\n        }\n\n        // Forward \"public\" properties of IndexedArray to 'this' (push(), pop() ...).\n        if (this[key] && key[0] !== '_') {\n            return this[key].bind ? this[key].bind(this) : this[key];\n        }\n\n        return undefined;\n    }\n\n    // TODO index access set, e.g. arr[5] = 42\n\n    push(value) {\n        if (this._index[value] !== undefined) {\n            if (!this._ignoreDuplicates) throw 'IndexedArray.push() failed - value ' + value + ' already exists';\n            return this._index[value];\n        }\n\n        const length = this._array.push(value);\n        this._index[value] = length - 1;\n        return length;\n    }\n\n    pop() {\n        const value = this._array.pop();\n        delete this._index[value];\n        return value;\n    }\n\n    delete(value) {\n        const index = this._index[value];\n        if (index !== undefined) {\n            delete this._array[this._index[value]];\n            delete this._index[value];\n            return index;\n        }\n        return -1;\n    }\n\n    indexOf(value) {\n        return this._index[value] >= 0 ? this._index[value] : -1;\n    }\n\n    isEmpty() {\n        return Object.keys(this._index).length == 0;\n    }\n\n    slice(start, end) {\n        const arr = this._array.slice(start, end);\n        return new IndexedArray(arr, this._ignoreDuplicates);\n    }\n\n    get length() {\n        return this._array.length;\n    }\n\n    get array() {\n        return this._array;\n    }\n}\nClass.register(IndexedArray);\n","class BufferUtils {\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    static fromAscii(string) {\n        var buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static toBase64(buffer) {\n        return btoa(String.fromCharCode(...new Uint8Array(buffer)));\n    }\n\n    static fromBase64(base64) {\n        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    }\n\n    static toBase64Clean(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '');\n    }\n\n    static toHex(buffer) {\n        return Array.prototype.map.call(buffer, x => ('00' + x.toString(16)).slice(-2)).join('');\n    }\n\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    static concat(a, b)  {\n        return BufferUtils.concatTypedArrays(\n            new Uint8Array(a.buffer || a),\n            new Uint8Array(b.buffer || b)\n        );\n    }\n\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n}\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    constructor(arg) {\n        super(arg);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    get readPos() {\n        return this._readPos;\n    }\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw 'Invalid readPos ' + value;\n        this._readPos = value;\n    }\n\n    get writePos() {\n        return this._writePos;\n    }\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw 'Invalid writePos ' + value;\n        this._writePos = value;\n    }\n\n    read(length) {\n        var value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return value;\n    }\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    readUint64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n    writeUint64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    readFixLengthString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] != 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n    writeFixLengthString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw 'Malformed value';\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n}\nClass.register(SerialBuffer);\n","class Crypto {\n    static get lib() { return CryptoLib.instance; }\n\n    static get settings() {\n        const hashAlgo = {name: 'SHA-256'};\n        const signAlgo = 'ECDSA';\n        const curve = 'P-256';    // can be 'P-256', 'P-384', or 'P-521'\n        return {\n            hashAlgo: hashAlgo,\n            curve: curve,\n            keys: {name: signAlgo, namedCurve: curve},\n            sign: {name: signAlgo, hash: hashAlgo}\n        };\n    }\n\n    static sha256(buffer) {\n        return Crypto.lib.digest(Crypto.settings.hashAlgo, buffer)\n            .then(hash => new Hash(hash));\n    }\n\n    static generateKeys() {\n        return Crypto.lib.generateKey(Crypto.settings.keys, true, ['sign', 'verify']);\n    }\n\n    static exportPrivate(privateKey) {\n        return Crypto.lib.exportKey('pkcs8', privateKey);\n    }\n\n    static importPrivate(privateKey) {\n        return Crypto.lib.importKey('pkcs8', privateKey, Crypto.settings.keys, true, ['sign']);\n    }\n\n    static exportPublic(publicKey, format ='raw') {\n        return Crypto.lib.exportKey(format, publicKey)\n            .then(key => new PublicKey(key));\n    }\n\n    static exportAddress(publicKey) {\n        return Crypto.exportPublic(publicKey).then(Crypto.publicToAddress);\n    }\n\n    static importPublic(publicKey, format = 'raw') {\n        return Crypto.lib.importKey(format, publicKey, Crypto.settings.keys, true, ['verify']);\n    }\n\n    static publicToAddress(publicKey) {\n        return Crypto.sha256(publicKey).then(hash => hash.subarray(0, 20))\n            .then(address => new Address(address));\n    }\n\n    static sign(privateKey, data) {\n        return Crypto.lib.sign(Crypto.settings.sign, privateKey, data)\n            .then(sign => new Signature(sign));\n    }\n\n    static verify(publicKey, signature, data) {\n        return Crypto.importPublic(publicKey)\n            .then(key => Crypto.lib.verify(Crypto.settings.sign, key, signature, data));\n    }\n}\nClass.register(Crypto);\n","class ObjectDB extends TypedDB {\n    constructor(tableName, type) {\n        super(tableName, type);\n    }\n\n    async key(obj) {\n        if (!obj.hash) throw 'ObjectDB requires objects with a .hash() method';\n        return BufferUtils.toBase64(await obj.hash());\n    }\n\n    async get(key) {\n        return await TypedDB.prototype.getObject.call(this, key);\n    }\n\n    async put(obj) {\n        const key = await this.key(obj);\n        await TypedDB.prototype.putObject.call(this, key, obj);\n        return key;\n    }\n\n    async delete(obj) {\n        const key = await this.key(obj);\n        await TypedDB.prototype.delete.call(this, key);\n        return key;\n    }\n\n    async transaction() {\n        const tx = await TypedDB.prototype.transaction.call(this);\n        const that = this;\n\n        tx.get = key => tx.getObject(key);\n        tx.put = async function(obj) {\n            const key = await that.key(obj);\n            await tx.putObject(key, obj);\n            return key;\n        };\n        const superDelete = tx.delete.bind(tx);\n        tx.delete = async function(obj) {\n            const key = await that.key(obj);\n            await superDelete(key);\n            return key;\n        };\n\n        return tx;\n    }\n}\nClass.register(ObjectDB);\n","class TypedDBTransaction {\n    constructor(db) {\n        this._db = db;\n        this._objects = {};\n        this._strings = {};\n        this._deletions = {};\n    }\n\n    commit() {\n        return this._db.nativeTransaction().then( tx => new Promise( (resolve, reject) => {\n            tx.on('complete', () => {\n                if (this._db.updateCache && this._db.flushCache) {\n                    this._db.updateCache(this._objects);\n                    this._db.updateCache(this._strings);\n                    this._db.flushCache(Object.keys(this._deletions));\n                }\n\n                resolve(true);\n            });\n            tx.on('error', e => reject(e));\n\n            for (let key in this._objects) {\n                tx.putObject(key, this._objects[key]);\n            }\n            for (let key in this._strings) {\n                tx.putString(key, this._strings[key]);\n            }\n            for (let key in this._deletions) {\n                tx.delete(key);\n            }\n\n            tx.commit();\n        }));\n    }\n\n    async getObject(key) {\n        if (this._deletions[key]) return undefined;\n        if (this._objects[key] !== undefined) return this._objects[key];\n        return await this._db.getObject(key);\n    }\n\n    putObject(key, value) {\n        this._objects[key] = value;\n        delete this._deletions[key];\n    }\n\n    async getString(key) {\n        if (this._deletions[key]) return undefined;\n        if (this._strings[key] !== undefined) return this._strings[key];\n        return await this._db.getString(key);\n    }\n\n    putString(key, value) {\n        this._strings[key] = value;\n        delete this._deletions[key];\n    }\n\n    delete(key) {\n        this._deletions[key] = true;\n        delete this._objects[key];\n        delete this._strings[key];\n    }\n}\nClass.register(TypedDBTransaction);\n","class NumberUtils {\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\nObject.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class ObjectUtils {\n    static cast(o, clazz) {\n        if (!o) return o;\n        o.__proto__ = clazz.prototype;\n        return o;\n    }\n}\nClass.register(ObjectUtils);\n","class PlatformUtils {\n    static isBrowser() {\n        return typeof window !== \"undefined\";\n    }\n}\nClass.register(PlatformUtils);\n","class StringUtils {\n    static isMultibyte(str) {\n        return /[\\uD800-\\uDFFF]/.test(str);\n    }\n}\nClass.register(StringUtils);\n","class Primitive extends Uint8Array {\n    constructor(arg, length) {\n        if (!arg) {\n            super(length);\n        } else if (typeof arg === 'string') {\n            const buffer = BufferUtils.fromBase64(arg);\n            Primitive._enforceLength(buffer, length);\n            super(buffer);\n        } else if (arg instanceof ArrayBuffer) {\n            Primitive._enforceLength(arg, length);\n            super(arg);\n        } else if (arg instanceof Uint8Array) {\n            Primitive._enforceLength(arg, length);\n            super(arg.buffer, arg.byteOffset, arg.byteLength);\n        } else {\n            throw 'Primitive: Invalid argument ' + arg;\n        }\n    }\n\n    static _enforceLength(buffer, length) {\n        if (length !== undefined && buffer.byteLength !== length) {\n            throw 'Primitive: Invalid length';\n        }\n    }\n\n    equals(o) {\n        return o instanceof Primitive\n            && BufferUtils.equals(this, o);\n    }\n\n    subarray(begin, end) {\n        return ArrayUtils.subarray(this, begin, end);\n    }\n\n    toString() {\n        return this.toBase64();\n    }\n    \n    toBase64() {\n        return BufferUtils.toBase64(this);\n    }\n\n    toHex() {\n        return BufferUtils.toHex(this);\n    }\n}\nClass.register(Primitive);\n","class Hash extends Primitive {\n\n    static get SERIALIZED_SIZE() {\n        return 32;\n    }\n\n    constructor(arg) {\n        super(arg, Hash.SERIALIZED_SIZE);\n    }\n\n    static unserialize(buf) {\n        return new Hash(buf.read(Hash.SERIALIZED_SIZE));\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this);\n        return buf;\n    }\n\n    get serializedSize() {\n        return Hash.SERIALIZED_SIZE;\n    }\n\n    equals(o) {\n        return o instanceof Hash\n            && super.equals(o);\n    }\n\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n}\nClass.register(Hash);\n","class PrivateKey extends Primitive {\n\n    static get SERIALIZED_SIZE() {\n        return 64;\n    }\n\n    constructor(arg) {\n        super(arg, PrivateKey.SERIALIZED_SIZE);\n    }\n\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PrivateKey.SERIALIZED_SIZE));\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this);\n        return buf;\n    }\n\n    get serializedSize() {\n        return PrivateKey.SERIALIZED_SIZE;\n    }\n\n    equals(o) {\n        return o instanceof PrivateKey\n            && super.equals(o);\n    }\n}\n\nClass.register(PrivateKey);\n","class PublicKey extends Primitive {\n\n    static get SERIALIZED_SIZE() {\n        return 65;\n    }\n\n    constructor(arg) {\n        super(arg, PublicKey.SERIALIZED_SIZE);\n    }\n\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SERIALIZED_SIZE));\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this);\n        return buf;\n    }\n\n    get serializedSize() {\n        return PublicKey.SERIALIZED_SIZE;\n    }\n\n    equals(o) {\n        return o instanceof PublicKey\n            && super.equals(o);\n    }\n\n    toAddress() {\n        return Crypto.publicToAddress(this);\n    }\n}\nClass.register(PublicKey);\n","class Signature extends Primitive {\n\n    static get SERIALIZED_SIZE() {\n        return 64;\n    }\n\n    constructor(arg) {\n        super(arg, Signature.SERIALIZED_SIZE);\n    }\n\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SERIALIZED_SIZE));\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this);\n        return buf;\n    }\n\n    get serializedSize() {\n        return Signature.SERIALIZED_SIZE;\n    }\n\n    equals(o) {\n        return o instanceof Signature\n            && super.equals(o);\n    }\n}\nClass.register(Signature);\n","class BlockHeader {\n    constructor(prevHash, bodyHash, accountsHash, nBits, timestamp, nonce) {\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint64(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint64(nonce)) throw 'Malformed nonce';\n\n        this._prevHash = prevHash;\n        this._bodyHash = bodyHash;\n        this._accountsHash = accountsHash;\n        this._nBits = nBits;\n        this._timestamp = timestamp;\n        this._nonce = nonce;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, BlockHeader);\n        o._prevHash = new Hash(o._prevHash);\n        o._bodyHash = new Hash(o._bodyHash);\n        o._accountsHash = new Hash(o._accountsHash);\n        // XXX clear out cached hash\n        o._hash = undefined;\n        return o;\n    }\n\n    static unserialize(buf) {\n        var prevHash = Hash.unserialize(buf);\n        var bodyHash = Hash.unserialize(buf);\n        var accountsHash = Hash.unserialize(buf);\n        var nBits = buf.readUint32();\n        var timestamp = buf.readUint64();\n        var nonce = buf.readUint64();\n        return new BlockHeader(prevHash, bodyHash, accountsHash, nBits, timestamp, nonce);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._prevHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint64(this._timestamp);\n        buf.writeUint64(this._nonce);\n        return buf;\n    }\n\n    get serializedSize() {\n        return this._prevHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*timestamp*/ 8\n            + /*nonce*/ 8;\n    }\n\n    async verifyProofOfWork(buf) {\n        const hash = await this.hash(buf);\n        return BlockUtils.isProofOfWork(hash, this.target);\n    }\n\n    async hash(buf) {\n        this._hash = this._hash || await Crypto.sha256(this.serialize(buf));\n        return this._hash;\n    }\n\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    toString() {\n        return `BlockHeader{`\n            + `prevHash=${this._prevHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + `}`;\n    }\n\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    get nBits() {\n        return this._nBits;\n    }\n\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n    }\n}\nClass.register(BlockHeader);\n","class BlockBody {\n\n    constructor(minerAddr, transactions) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!transactions || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        this._minerAddr = minerAddr;\n        this._transactions = transactions;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, BlockBody);\n        o._minerAddr = new Address(o._minerAddr);\n        o._transactions.forEach(tx => Transaction.cast(tx));\n        return o;\n    }\n\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        return new BlockBody(minerAddr, transactions);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint16(this._transactions.length);\n        for (let tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        return buf;\n    }\n\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*transactionsLength*/ 2;\n        for (let tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        return size;\n    }\n\n    hash() {\n        return BlockBody._computeRoot([this._minerAddr, ...this._transactions]);\n    }\n\n    static _computeRoot(values) {\n        // values may contain:\n        // - transactions (Transaction)\n        // - miner address (Uint8Array)\n        const len = values.length;\n        if (len == 1) {\n            const value = values[0];\n            return value.hash ? /*transaction*/ value.hash() : /*miner address*/ Crypto.sha256(value);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        return Promise.all([\n            BlockBody._computeRoot(left),\n            BlockBody._computeRoot(right)\n        ])\n            .then(hashes => Crypto.sha256(BufferUtils.concat(hashes[0], hashes[1])));\n    }\n\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    get transactions() {\n        return this._transactions;\n    }\n\n    get transactionCount() {\n        return this._transactions.length;\n    }\n}\nClass.register(BlockBody);\n","class BlockUtils {\n    static compactToTarget(compact) {\n        return (compact & 0xffffff) * (2 ** (8 * ((compact >> 24) - 3)));\n    }\n\n    static targetToCompact(target) {\n        // Convert the target into base 16 with zero-padding.\n        let base16 = target.toString(16);\n        if (base16.length % 2 != 0) {\n            base16 = \"0\" + base16;\n        }\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (parseInt(base16.substr(0, 2), 16) > 0x7f) {\n            base16 = \"00\" + base16;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        let size = base16.length / 2;\n        let compact = size << 24;\n\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        const numBytes = Math.min(size, 3);\n        for (let i = 0; i < numBytes; ++i) {\n            compact |= parseInt(base16.substr(i * 2, 2), 16) << ((2 - i) * 8);\n        }\n\n        return compact;\n    }\n\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX / BlockUtils.compactToTarget(compact);\n    }\n\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(Policy.BLOCK_TARGET_MAX / difficulty);\n    }\n\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX / difficulty;\n    }\n\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX / target;\n    }\n\n    static isProofOfWork(hash, target) {\n        return parseInt(hash.toHex(), 16) <= target;\n    }\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    static isValidTarget(target) {\n        return target >= 1 && target <= Policy.BLOCK_TARGET_MAX;\n    }\n}\nClass.register(BlockUtils);\n","class InvVector {\n    static async fromBlock(block) {\n        const hash = await block.hash();\n        return new InvVector(InvVector.Type.BLOCK, hash);\n    }\n\n    static async fromTransaction(tx) {\n        const hash = await tx.hash();\n        return new InvVector(InvVector.Type.TRANSACTION, hash);\n    }\n\n    constructor(type, hash) {\n        this._type = type;\n        this._hash = hash;\n    }\n\n    static unserialize(buf) {\n        let type = buf.readUint32();\n        let hash = Hash.unserialize(buf);\n        return new InvVector(type, hash);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint32(this._type);\n        this._hash.serialize(buf);\n        return buf;\n    }\n\n    equals(o) {\n        return o instanceof InvVector\n            && this._type == o.type\n            && this._hash.equals(o.hash);\n    }\n\n    toString() {\n        return 'InvVector{type=' + this._type + ', hash=' + this.hash + '}';\n    }\n\n    get serializedSize() {\n        return /*invType*/ 4\n            + this._hash.serializedSize;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get hash() {\n        return this._hash;\n    }\n}\nInvVector.Type = {\n    ERROR: 0,\n    TRANSACTION: 1,\n    BLOCK: 2\n};\nClass.register(InvVector);\n","class NetAddress {\n    constructor(services, timestamp, host, port, signalId, distance) {\n        this._services = services;\n        this._timestamp = timestamp;\n        this._host = host;\n        this._port = port;\n        this._signalId = signalId;\n        this._distance = distance;\n    }\n\n    static unserialize(buf) {\n        const services = buf.readUint32();\n        const timestamp = buf.readUint64();\n        const host = buf.readVarLengthString();\n        const port = buf.readUint16();\n        const signalId = buf.readUint64();\n        const distance = buf.readUint8();\n        return new NetAddress(services, timestamp, host, port, signalId, distance);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint32(this._services);\n        buf.writeUint64(this._timestamp);\n        buf.writeVarLengthString(this._host);\n        buf.writeUint16(this._port);\n        buf.writeUint64(this._signalId);\n        buf.writeUint8(this._distance);\n        return buf;\n    }\n\n    get serializedSize() {\n        return /*services*/ 4\n            + /*timestamp*/ 8\n            + /*extra byte VarLengthString host*/ 1\n            + this._host.length\n            + /*port*/ 2\n            + /*signalId*/ 8\n            + /*distance*/ 1;\n    }\n\n    equals(o) {\n        return o instanceof NetAddress\n            && this._services === o.services\n            && this._host === o.host\n            && this._port === o.port\n            && this._signalId === o.signalId;\n    }\n\n    toString() {\n        return \"NetAddress{services=\" + this._services + \", host=\" + this._host\n            + \", port=\" + this._port + \", signalId=\" + this._signalId + \"}\";\n    }\n\n    get services() {\n        return this._services;\n    }\n\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    get host() {\n        return this._host;\n    }\n\n    get port() {\n        return this._port;\n    }\n\n    get signalId() {\n        return this._signalId;\n    }\n\n    get distance() {\n        return this._distance;\n    }\n\n    // Changed when passed on to other peers.\n    set distance(value) {\n        this._distance = value;\n    }\n}\nClass.register(NetAddress);\n","class Message {\n    constructor(type) {\n        if (!type || !type.length || StringUtils.isMultibyte(type) || type.length > 12) throw 'Malformed type';\n        this._type = type;\n    }\n\n    static peekType(buf) {\n        // Store current read position.\n        var pos = buf.readPos;\n\n        // Set read position past the magic to the beginning of the type string.\n        buf.readPos = 4;\n\n        // Read the type string.\n        const type = buf.readFixLengthString(12);\n\n        // Reset the read position to original.\n        buf.readPos = pos;\n\n        return type;\n    }\n\n    static unserialize(buf) {\n        const magic = buf.readUint32();\n        if (magic !== Message.MAGIC) throw 'Malformed magic';\n        const type = buf.readFixLengthString(12);\n        const length = buf.readUint32();\n        const checksum = buf.readUint32();\n        // TODO validate checksum\n\n        return new Message(type);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint32(Message.MAGIC);\n        buf.writeFixLengthString(this._type, 12);\n        buf.writeUint32(this._length);\n        buf.writeUint32(this._checksum);\n        return buf;\n    }\n\n    get serializedSize() {\n        return /*magic*/ 4\n            + /*type*/ 12\n            + /*length*/ 4\n            + /*checksum*/ 4;\n    }\n\n    get magic() {\n        return this._magic;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    get checksum() {\n        return this._checksum;\n    }\n}\nMessage.MAGIC = 0x42042042;\nMessage.Type = {\n    VERSION: 'version',\n    VERACK: 'verack',\n    INV: 'inv',\n    GETDATA: 'getdata',\n    NOTFOUND: 'notfound',\n    GETBLOCKS: 'getblocks',\n    GETHEADERS: 'getheaders',\n    TX: 'tx',\n    BLOCK: 'block',\n    HEADERS: 'headers',\n    MEMPOOL: 'mempool',\n    REJECT: 'reject',\n\n    ADDR: 'addr',\n    GETADDR: 'getaddr',\n    PING: 'ping',\n    PONG: 'pong',\n\n    SIGNAL: 'signal',\n\n    SENDHEADERS: 'sendheaders',\n\n    // Nimiq\n    GETBALANCES: 'getbalances',\n    BALANCES: 'balances'\n};\nClass.register(Message);\n","class AddrMessage extends Message {\n    constructor(addresses) {\n        super(Message.Type.ADDR);\n        if (!addresses || !NumberUtils.isUint16(addresses.length)\n            || addresses.some(it => !(it instanceof NetAddress))) throw 'Malformed addresses';\n        this._addresses = addresses;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const addresses = [];\n        for (let i = 0; i < count; ++i) {\n            addresses.push(NetAddress.unserialize(buf));\n        }\n        return new AddrMessage(addresses);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._addresses.length);\n        for (let addr of this._addresses) {\n            addr.serialize(buf);\n        }\n        return buf;\n    }\n\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2;\n        for (let addr of this._addresses) {\n            size += addr.serializedSize;\n        }\n        return size;\n    }\n\n    get addresses() {\n        return this._addresses;\n    }\n}\nClass.register(AddrMessage);\n","class BlockMessage extends Message {\n    constructor(block) {\n        super(Message.Type.BLOCK);\n        // TODO Bitcoin block messages start with a block version\n        this._block = block;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const block = Block.unserialize(buf);\n        return new BlockMessage(block);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._block.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + this._block.serializedSize;\n    }\n\n    get block() {\n        return this._block;\n    }\n}\nClass.register(BlockMessage);\n","class GetAddrMessage extends Message {\n    constructor(serviceMask) {\n        super(Message.Type.GETADDR);\n        if (!NumberUtils.isUint32(serviceMask)) throw 'Malformed serviceMask';\n        this._serviceMask = serviceMask;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const serviceMask = buf.readUint32();\n        return new GetAddrMessage(serviceMask);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._serviceMask);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*serviceMask*/ 4;\n    }\n\n    get serviceMask() {\n        return this._serviceMask;\n    }\n}\nClass.register(GetAddrMessage);\n","class GetBlocksMessage extends Message {\n    constructor(hashes, hashStop) {\n        super(Message.Type.GETBLOCKS);\n        if (!hashes || !NumberUtils.isUint16(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw 'Malformed hashes';\n        this._hashes = hashes;\n        this._hashStop = hashStop;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const hashes = [];\n        for (let i = 0; i < count; i++) {\n            hashes.push(Hash.unserialize(buf));\n        }\n        const hashStop = Hash.unserialize(buf);\n        return new GetBlocksMessage(hashes, hashStop);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._hashes.length);\n        for (let hash of this._hashes) {\n            hash.serialize(buf);\n        }\n        this._hashStop.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2\n            + this._hashStop.serializedSize;\n        for (let hash of this._hashes) {\n            size += hash.serializedSize;\n        }\n        return size;\n    }\n\n    get hashes() {\n        return this._hashes;\n    }\n\n    get hashStop() {\n        return this._hashStop;\n    }\n}\nClass.register(GetBlocksMessage);\n","class BaseInventoryMessage extends Message {\n    constructor(type, vectors) {\n        super(type);\n        if (!vectors || !NumberUtils.isUint16(vectors.length)\n            || vectors.some(it => !(it instanceof InvVector))) throw 'Malformed vectors';\n        this._vectors = vectors;\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint16(this._vectors.length);\n        for (let vector of this._vectors) {\n            vector.serialize(buf);\n        }\n        return buf;\n    }\n\n    get serializedSize() {\n        let size = super.serializedSize\n            + /*count*/ 2;\n        for (let vector of this._vectors) {\n            size += vector.serializedSize;\n        }\n        return size;\n    }\n\n    get vectors() {\n        return this._vectors;\n    }\n}\nClass.register(BaseInventoryMessage);\n\nclass InvMessage extends BaseInventoryMessage {\n    constructor(vectors) {\n        super(Message.Type.INV, vectors);\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new InvMessage(vectors);\n    }\n}\nClass.register(InvMessage);\n\nclass GetDataMessage extends BaseInventoryMessage {\n    constructor(vectors) {\n        super(Message.Type.GETDATA, vectors);\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new GetDataMessage(vectors);\n    }\n}\n\nClass.register(GetDataMessage);\n\nclass NotFoundMessage extends BaseInventoryMessage {\n    constructor(vectors) {\n        super(Message.Type.NOTFOUND, vectors);\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const count = buf.readUint16();\n        const vectors = [];\n        for (let i = 0; i < count; ++i) {\n            vectors.push(InvVector.unserialize(buf));\n        }\n        return new NotFoundMessage(vectors);\n    }\n}\nClass.register(NotFoundMessage);\n","class MempoolMessage extends Message {\n    constructor() {\n        super(Message.Type.MEMPOOL);\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        return new MempoolMessage();\n    }\n}\nClass.register(MempoolMessage);\n","class PingMessage extends Message {\n    constructor(nonce) {\n        super(Message.Type.PING);\n        this._nonce = nonce;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const nonce = buf.readUint32();\n        return new PingMessage(nonce);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*nonce*/ 4;\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n}\nClass.register(PingMessage);\n","class PongMessage extends Message {\n    constructor(nonce) {\n        super(Message.Type.PONG);\n        this._nonce = nonce;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const nonce = buf.readUint32();\n        return new PongMessage(nonce);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*nonce*/ 4;\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n}\nClass.register(PongMessage);\n","class RejectMessage extends Message {\n    constructor(messageType, code, reason, extraData) {\n        super(Message.Type.REJECT);\n        if (StringUtils.isMultibyte(messageType) || messageType.length > 12) throw 'Malformed type';\n        if (!NumberUtils.isUint8(code)) throw 'Malformed code';\n        if (StringUtils.isMultibyte(reason) || reason.length > 255) throw 'Malformed reason';\n        // TODO extraData\n\n        this._messageType = messageType;\n        this._code = code;\n        this._reason = reason;\n        this._extraData = extraData;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const messageType = buf.readVarLengthString();\n        const code = buf.readUint8();\n        const reason = buf.readVarLengthString();\n        // TODO extraData\n        return new BlockMessage(block);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeVarLengthString(this._messageType);\n        buf.writeUint8(this._code);\n        buf.writeVarLengthString(this._reason);\n        // TODO extraData\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*messageType VarLengthString extra byte*/ 1\n            + this._messageType.length\n            + /*code*/ 1\n            + /*reason VarLengthString extra byte*/ 1\n            + this._reason.length;\n    }\n\n    get messageType() {\n        return this._messageType;\n    }\n\n    get code() {\n        return this._code;\n    }\n\n    get reason() {\n        return this._reason;\n    }\n\n    get extraData() {\n        return this._extraData;\n    }\n}\nRejectMessage.Code = {};\nRejectMessage.Code.DUPLICATE = 0x12;\nClass.register(RejectMessage);\n","class SignalMessage extends Message {\n    constructor(senderId, recipientId, payload) {\n        super(Message.Type.SIGNAL);\n        if (!senderId || !NumberUtils.isUint64(senderId)) throw 'Malformed senderId';\n        if (!recipientId || !NumberUtils.isUint64(recipientId)) throw 'Malformed recipientId';\n        if (!payload || !(payload instanceof Uint8Array) || !NumberUtils.isUint16(payload.byteLength)) throw 'Malformed payload';\n        this._senderId = senderId;\n        this._recipientId = recipientId;\n        this._payload = payload;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const senderId = buf.readUint64();\n        const recipientId = buf.readUint64();\n        const length = buf.readUint16();\n        const payload = buf.read(length);\n        return new SignalMessage(senderId, recipientId, payload);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint64(this._senderId);\n        buf.writeUint64(this._recipientId);\n        buf.writeUint16(this._payload.byteLength);\n        buf.write(this._payload);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*senderId*/ 8\n            + /*recipientId*/ 8\n            + /*payloadLength*/ 2\n            + this._payload.byteLength;\n    }\n\n    get senderId() {\n        return this._senderId;\n    }\n\n    get recipientId() {\n        return this._recipientId;\n    }\n\n    get payload() {\n        return this._payload;\n    }\n}\nClass.register(SignalMessage);\n","class TxMessage extends Message {\n    constructor(transaction) {\n        super(Message.Type.TX);\n        this._transaction = transaction;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const transaction = Transaction.unserialize(buf);\n        return new TxMessage(transaction);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._transaction.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + this._transaction.serializedSize;\n    }\n\n    get transaction() {\n        return this._transaction;\n    }\n}\nClass.register(TxMessage);\n","class VerAckMessage extends Message {\n    constructor() {\n        super(Message.Type.VERACK);\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        return new VerAckMessage();\n    }\n}\nClass.register(VerAckMessage);\n","class VersionMessage extends Message {\n    constructor(version, netAddress, startHeight) {\n        super(Message.Type.VERSION);\n        this._version = version;\n        this._netAddress = netAddress;\n        this._startHeight = startHeight;\n    }\n\n    static unserialize(buf) {\n        Message.unserialize(buf);\n        const version = buf.readUint32();\n        const netAddress = NetAddress.unserialize(buf);\n        const startHeight = buf.readUint32();\n        return new VersionMessage(version, netAddress, startHeight);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        buf.writeUint32(this._version);\n        this._netAddress.serialize(buf);\n        buf.writeUint32(this._startHeight);\n        return buf;\n    }\n\n    get serializedSize() {\n        return super.serializedSize\n            + /*version*/ 4\n            + this._netAddress.serializedSize\n            + /*startHeight*/ 4;\n    }\n\n    get version() {\n        return this._version;\n    }\n\n    get netAddress() {\n        return this._netAddress;\n    }\n\n    get startHeight() {\n        return this._startHeight;\n    }\n}\nClass.register(VersionMessage);\n","class Address extends Primitive {\n\n    static get SERIALIZED_SIZE() {\n        return 20;\n    }\n\n    constructor(arg) {\n        super(arg, Address.SERIALIZED_SIZE);\n    }\n\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this);\n        return buf;\n    }\n\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n}\nClass.register(Address);\n","class Core {\n    // Singleton\n    static get() {\n        if (!Core._instance) throw 'Core.get() failed - not initialized yet. Call Core.init() first.';\n        return Core._instance;\n    }\n\n    static init(fnSuccess, fnError) {\n        // Don't initialize core twice.\n        if (Core._instance) {\n            console.warn('Core.init() called more than once.');\n\n            fnSuccess(Core._instance);\n            return;\n        }\n\n        // Wait until there is only a single browser window open for this origin.\n        WindowDetector.get().waitForSingleWindow(async function() {\n            Core._instance = await new Core();\n            fnSuccess(Core._instance);\n        }, fnError);\n    }\n\n    constructor() {\n        return this._init();\n    }\n\n    async _init() {\n        // Model\n        this.accounts = await Accounts.getPersistent();\n        this.blockchain = await Blockchain.getPersistent(this.accounts);\n        this.mempool = new Mempool(this.blockchain, this.accounts);\n\n        // Network\n        this.network = await new Network(this.blockchain);\n\n        // Consensus\n        this.consensus = new Consensus(this.blockchain, this.mempool, this.network);\n\n        // Wallet\n        this.wallet = await Wallet.getPersistent();\n\n        // Miner\n        this.miner = new Miner(this.blockchain, this.mempool, this.wallet.address);\n\n        Object.freeze(this);\n        return this;\n    }\n}\nCore._instance = null;\nClass.register(Core);\n","class Consensus extends Observable {\n    static get SYNC_THROTTLE() {\n        return 1000; // ms\n    }\n\n    constructor(blockchain, mempool, network) {\n        super();\n        this._blockchain = blockchain;\n        this._mempool = mempool;\n\n        this._agents = {};\n        this._timers = new Timers();\n        this._syncing = false;\n        this._established = false;\n\n        network.on('peer-joined', peer => this._onPeerJoined(peer));\n        network.on('peer-left', peer => this._onPeerLeft(peer));\n\n        // Notify peers when our blockchain head changes.\n        blockchain.on('head-changed', head => {\n            // Don't announce head changes if we are not synced yet.\n            if (!this._established) return;\n\n            for (let peerId in this._agents) {\n                this._agents[peerId].relayBlock(head);\n            }\n        });\n\n        // Relay new (verified) transactions to peers.\n        mempool.on('transaction-added', tx => {\n            // Don't relay transactions if we are not synced yet.\n            if (!this._established) return;\n\n            for (let peerId in this._agents) {\n                this._agents[peerId].relayTransaction(tx);\n            }\n        });\n    }\n\n    _onPeerJoined(peer) {\n        // Create a ConsensusAgent for each peer that connects.\n        const agent = new ConsensusAgent(this._blockchain, this._mempool, peer);\n        this._agents[peer.netAddress] = agent;\n\n        // If no more peers connect within the specified timeout, start syncing.\n        this._timers.resetTimeout('sync', this._syncBlockchain.bind(this), Consensus.SYNC_THROTTLE);\n    }\n\n    _onPeerLeft(peer) {\n        delete this._agents[peer.netAddress];\n    }\n\n    _syncBlockchain() {\n        // Wait for ongoing sync to finish.\n        if (this._syncing) {\n            return;\n        }\n\n        // Find the peer with the highest chain that isn't sync'd yet.\n        let bestHeight = -1;\n        let bestAgent = null;\n        for (let key in this._agents) {\n            const agent = this._agents[key];\n            if (!agent.synced && agent.peer.startHeight >= bestHeight) {\n                bestHeight = agent.peer.startHeight;\n                bestAgent = agent;\n            }\n        }\n\n        if (!bestAgent) {\n            // We are synced with all connected peers.\n            console.log('Synced with all connected peers (' + Object.keys(this._agents).length + '), consensus established.');\n            console.log('Blockchain: height=' + this._blockchain.height + ', totalWork=' + this._blockchain.totalWork + ', headHash=' + this._blockchain.headHash.toBase64());\n\n            this._syncing = false;\n            this._established = true;\n            this.fire('established');\n\n            return;\n        }\n\n        console.log('Syncing blockchain with peer ' + bestAgent.peer);\n\n        this._syncing = true;\n\n        // If we expect this sync to change our blockchain height, tell listeners about it.\n        if (bestHeight > this._blockchain.height) {\n            this.fire('syncing', bestHeight);\n        }\n\n        bestAgent.on('sync', () => this._onPeerSynced());\n        bestAgent.on('close', () => {\n            this._onPeerLeft(bestAgent.peer);\n            this._onPeerSynced();\n        });\n        bestAgent.syncBlockchain();\n    }\n\n    _onPeerSynced() {\n        this._syncing = false;\n        this._syncBlockchain();\n    }\n\n    get established() {\n        return this._established;\n    }\n\n    // TODO confidence level?\n}\nClass.register(Consensus);\n","class ConsensusAgent extends Observable {\n    // Number of InvVectors in invToRequest pool to automatically trigger a getdata request.\n    static get REQUEST_THRESHOLD() {\n        return 50;\n    }\n\n    // Time to wait after the last received inv message before sending getdata.\n    static get REQUEST_THROTTLE() {\n        return 500; // ms\n    }\n\n    // Maximum time to wait after sending out getdata or receiving the last object for this request.\n    static get REQUEST_TIMEOUT() {\n        return 5000; // ms\n    }\n\n    // Maximum number of blockchain sync retries before closing the connection.\n    // XXX If the peer is on a long fork, it will count as a failed sync attempt\n    // if our blockchain doesn't switch to the fork within 500 (max InvVectors returned by getblocks)\n    // blocks.\n    static get MAX_SYNC_ATTEMPTS() {\n        return 5;\n    }\n\n    constructor(blockchain, mempool, peer) {\n        super();\n        this._blockchain = blockchain;\n        this._mempool = mempool;\n        this._peer = peer;\n\n        // Flag indicating that we are currently syncing our blockchain with the peer's.\n        this._syncing = false;\n\n        // Flag indicating that have synced our blockchain with the peer's.\n        this._synced = false;\n\n        // The height of our blockchain when we last attempted to sync the chain.\n        this._lastChainHeight = 0;\n\n        // The number of failed blockchain sync attempts.\n        this._failedSyncs = 0;\n\n        // Invectory of all objects that we think the remote peer knows.\n        this._knownObjects = {};\n\n        // InvVectors we want to request via getdata are collected here and\n        // periodically requested.\n        this._objectsToRequest = new IndexedArray([], true);\n\n        // Objects that are currently being requested from the peer.\n        this._objectsInFlight = null;\n\n        // Helper object to keep track of timeouts & intervals.\n        this._timers = new Timers();\n\n        // Listen to consensus messages from the peer.\n        peer.channel.on('inv', msg => this._onInv(msg));\n        peer.channel.on('getdata', msg => this._onGetData(msg));\n        peer.channel.on('notfound', msg => this._onNotFound(msg));\n        peer.channel.on('block', msg => this._onBlock(msg));\n        peer.channel.on('tx', msg => this._onTx(msg));\n        peer.channel.on('getblocks', msg => this._onGetBlocks(msg));\n        peer.channel.on('mempool', msg => this._onMempool(msg));\n\n        // Clean up when the peer disconnects.\n        peer.channel.on('close', () => this._onClose());\n\n        // Wait for the blockchain to processes queued blocks before requesting more.\n        this._blockchain.on('ready', () => {\n            if (this._syncing) this.syncBlockchain();\n        });\n    }\n\n    /* Public API */\n\n    async relayBlock(block) {\n        // Don't relay block to this peer if it already knows it.\n        const hash = await block.hash();\n        if (this._knownObjects[hash]) return;\n\n        // Relay block to peer.\n        const vector = new InvVector(InvVector.Type.BLOCK, hash);\n        this._peer.channel.inv([vector]);\n    }\n\n    async relayTransaction(transaction) {\n        // Don't relay transaction to this peer if it already knows it.\n        const hash = await transaction.hash();\n        if (this._knownObjects[hash]) return;\n\n        // Relay transaction to peer.\n        const vector = new InvVector(InvVector.Type.TRANSACTION, hash);\n        this._peer.channel.inv([vector]);\n    }\n\n    syncBlockchain() {\n        this._syncing = true;\n\n        // If the blockchain is still busy processing blocks, wait for it to catch up.\n        if (this._blockchain.busy) {\n            console.log('Blockchain busy, waiting ...');\n        }\n        // If we already requested blocks from the peer but it didn't give us any\n        // good ones, retry or drop the peer.\n        else if (this._lastChainHeight == this._blockchain.height) {\n            this._failedSyncs++;\n            if (this._failedSyncs < ConsensusAgent.MAX_SYNC_ATTEMPTS) {\n                this._requestBlocks();\n            } else {\n                this._peer.channel.close('blockchain sync failed');\n            }\n        }\n        // If the peer has a longer chain than us, request blocks from it.\n        else if (this._blockchain.height < this._peer.startHeight) {\n            this._lastChainHeight = this._blockchain.height;\n            this._requestBlocks();\n        }\n        // The peer has a shorter chain than us.\n        // TODO what do we do here?\n        else if (this._blockchain.height > this._peer.startHeight) {\n            console.log('Peer ' + this._peer + ' has a shorter chain (' + this._peer.startHeight + ') than us');\n\n            // XXX assume consensus state?\n            this._syncing = false;\n            this._synced = true;\n            this.fire('sync');\n        }\n        // We have the same chain height as the peer.\n        // TODO Do we need to check that we have the same head???\n        else {\n            // Consensus established.\n            this._syncing = false;\n            this._synced = true;\n            this.fire('sync');\n        }\n    }\n\n    _requestBlocks() {\n        // Request blocks starting from our hardest chain head going back to\n        // the genesis block. Space out blocks more when getting closer to the\n        // genesis block.\n        const hashes = [];\n        let step = 1;\n        for (let i = this._blockchain.height - 1; i > 0; i -= step) {\n            // Push top 10 hashes first, then back off exponentially.\n            if (hashes.length >= 10) {\n                step *= 2;\n            }\n            hashes.push(this._blockchain.path[i]);\n        }\n\n        // Push the genesis block hash.\n        hashes.push(Block.GENESIS.HASH);\n\n        // Request blocks from peer.\n        this._peer.channel.getblocks(hashes);\n\n        // Drop the peer if it doesn't start sending InvVectors for its chain within the timeout.\n        this._timers.setTimeout('getblocks', () => this._peer.channel.close('getblocks timeout'), ConsensusAgent.REQUEST_TIMEOUT);\n    }\n\n    async _onInv(msg) {\n        // Clear the getblocks timeout.\n        this._timers.clearTimeout('getblocks');\n\n        // Check which of the advertised objects we know\n        // Request unknown objects, ignore known ones.\n        const unknownObjects = [];\n        for (let vector of msg.vectors) {\n            switch (vector.type) {\n                case InvVector.Type.BLOCK: {\n                    const block = await this._blockchain.getBlock(vector.hash);\n                    //console.log('[INV] Check if block ' + vector.hash.toBase64() + ' is known: ' + !!block);\n                    if (!block) {\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                case InvVector.Type.TRANSACTION: {\n                    const tx = await this._mempool.getTransaction(vector.hash);\n                    //console.log('[INV] Check if transaction ' + vector.hash.toBase64() + ' is known: ' + !!tx);\n                    if (!tx) {\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                default:\n                    throw 'Invalid inventory type: ' + vector.type;\n            }\n        }\n\n        console.log('[INV] ' + msg.vectors.length + ' vectors, ' + unknownObjects.length + ' previously unknown');\n\n        // Keep track of the objects the peer knows.\n        for (let obj of unknownObjects) {\n            this._knownObjects[obj.hash] = obj;\n        }\n\n        if (unknownObjects.length) {\n            // Store unknown vectors in objectsToRequest array.\n            for (let obj of unknownObjects) {\n                this._objectsToRequest.push(obj);\n            }\n\n            // Clear the request throttle timeout.\n            this._timers.clearTimeout('inv');\n\n            // If there are enough objects queued up, send out a getdata request.\n            if (this._objectsToRequest.length >= ConsensusAgent.REQUEST_THRESHOLD) {\n                this._requestData();\n            }\n            // Otherwise, wait a short time for more inv messages to arrive, then request.\n            else {\n                this._timers.setTimeout('inv', () => this._requestData(), ConsensusAgent.REQUEST_THROTTLE);\n            }\n        }\n    }\n\n    async _requestData() {\n        // Only one request at a time.\n        if (this._objectsInFlight) return;\n\n        // Don't do anything if there are no objects queued to request.\n        if (this._objectsToRequest.isEmpty()) return;\n\n        // Mark the requested objects as in-flight.\n        this._objectsInFlight = this._objectsToRequest;\n\n        // Request all queued objects from the peer.\n        // TODO depending in the REQUEST_THRESHOLD, we might need to split up\n        // the getdata request into multiple ones.\n        this._peer.channel.getdata(this._objectsToRequest.array);\n\n        // Reset the queue.\n        this._objectsToRequest = new IndexedArray([], true);\n\n        // Set timer to detect end of request / missing objects\n        this._timers.setTimeout('getdata', () => this._noMoreData(), ConsensusAgent.REQUEST_TIMEOUT);\n    }\n\n    _noMoreData() {\n        // Cancel the request timeout timer.\n        this._timers.clearTimeout('getdata');\n\n        // Reset objects in flight.\n        this._objectsInFlight = null;\n\n        // If there are more objects to request, request them.\n        if (!this._objectsToRequest.isEmpty()) {\n            this._requestData();\n        }\n        // Otherwise, request more blocks if we are still syncing the blockchain.\n        else if (this._syncing) {\n            this.syncBlockchain();\n        }\n    }\n\n    async _onBlock(msg) {\n        const hash = await msg.block.hash();\n        //console.log('[BLOCK] Received block ' + hash.toBase64());\n\n        // Check if we have requested this block.\n        const vector = new InvVector(InvVector.Type.BLOCK, hash);\n        if (this._objectsInFlight.indexOf(vector) < 0) {\n            console.warn('Unsolicited block ' + hash + ' received from peer ' + this._peer + ', discarding');\n            return;\n        }\n\n        // Mark object as received.\n        this._onObjectReceived(vector);\n\n        // Put block into blockchain.\n        this._blockchain.pushBlock(msg.block);\n\n        // TODO send reject message if we don't like the block\n        // TODO what to do if the peer keeps sending invalid blocks?\n    }\n\n    async _onTx(msg) {\n        const hash = await msg.transaction.hash();\n        console.log('[TX] Received transaction ' + hash.toBase64());\n\n        // Check if we have requested this transaction.\n        const vector = new InvVector(InvVector.Type.TRANSACTION, hash);\n        if (this._objectsInFlight.indexOf(vector) < 0) {\n            console.warn('Unsolicited transaction ' + hash + ' received from peer ' + this._peer + ', discarding');\n            return;\n        }\n\n        // Mark object as received.\n        this._onObjectReceived(vector);\n\n        // Put transaction into mempool.\n        this._mempool.pushTransaction(msg.transaction);\n\n        // TODO send reject message if we don't like the transaction\n        // TODO what to do if the peer keeps sending invalid transactions?\n    }\n\n    _onNotFound(msg) {\n        console.log('[NOTFOUND] ' + msg.vectors.length + ' unknown objects', msg.vectors);\n\n        // Remove unknown objects from in-flight list.\n        for (let vector of msg.vectors) {\n            if (this._objectsInFlight.indexOf(vector) < 0) {\n                console.warn('Unsolicited notfound vector ' + vector + ' from peer ' + this._peer, vector);\n                continue;\n            }\n\n            console.log('Peer ' + this._peer + ' did not find ' + obj, obj);\n\n            this._onObjectReceived(vector);\n        }\n    }\n\n    _onObjectReceived(vector) {\n        if (!this._objectsInFlight) return;\n\n        // Remove the vector from the objectsInFlight.\n        this._objectsInFlight.delete(vector);\n\n        // Reset the request timeout if we expect more objects to come.\n        if (!this._objectsInFlight.isEmpty()) {\n            this._timers.resetTimeout('getdata', () => this._noMoreData(), ConsensusAgent.REQUEST_TIMEOUT);\n        } else {\n            this._noMoreData();\n        }\n    }\n\n\n    /* Request endpoints */\n\n    async _onGetData(msg) {\n        // check which of the requested objects we know\n        // send back all known objects\n        // send notfound for unknown objects\n        const unknownObjects = [];\n        for (let vector of msg.vectors) {\n            switch (vector.type) {\n                case InvVector.Type.BLOCK: {\n                    const block = await this._blockchain.getBlock(vector.hash);\n                    console.log('[GETDATA] Check if block ' + vector.hash.toBase64() + ' is known: ' + !!block);\n                    if (block) {\n                        // We have found a requested block, send it back to the sender.\n                        this._peer.channel.block(block);\n                    } else {\n                        // Requested block is unknown.\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                case InvVector.Type.TRANSACTION: {\n                    const tx = await this._mempool.getTransaction(vector.hash);\n                    console.log('[GETDATA] Check if transaction ' + vector.hash.toBase64() + ' is known: ' + !!tx);\n                    if (tx) {\n                        // We have found a requested transaction, send it back to the sender.\n                        this._peer.channel.tx(tx);\n                    } else {\n                        // Requested transaction is unknown.\n                        unknownObjects.push(vector);\n                    }\n                    break;\n                }\n                default:\n                    throw 'Invalid inventory type: ' + vector.type;\n            }\n        }\n\n        // Report any unknown objects back to the sender.\n        if (unknownObjects.length) {\n            this._peer.channel.notfound(unknownObjects);\n        }\n    }\n\n    async _onGetBlocks(msg) {\n        console.log('[GETBLOCKS] Request for blocks, ' + msg.hashes.length + ' block locators');\n\n        // A peer has requested blocks. Check all requested block locator hashes\n        // in the given order and pick the first hash that is found on our main\n        // chain, ignore the rest. If none of the requested hashes is found,\n        // pick the genesis block hash. Send the main chain starting from the\n        // picked hash back to the peer.\n        // TODO honor hashStop argument\n        const mainPath = this._blockchain.path;\n        let startIndex = -1;\n\n        for (let hash of msg.hashes) {\n            // Shortcut for genesis block which will be the only block sent by\n            // fresh peers.\n            if (Block.GENESIS.HASH.equals(hash)) {\n                startIndex = 0;\n                break;\n            }\n\n            // Check if we know the requested block.\n            const block = await this._blockchain.getBlock(hash);\n\n            // If we don't know the block, try the next one.\n            if (!block) continue;\n\n            // If the block is not on our main chain, try the next one.\n            // mainPath is an IndexedArray with constant-time .indexOf()\n            startIndex = mainPath.indexOf(hash);\n            if (startIndex < 0) continue;\n\n            // We found a block, ignore remaining block locator hashes.\n            break;\n        }\n\n        // If we found none of the requested blocks on our main chain,\n        // start with the genesis block.\n        if (startIndex < 0) {\n            // XXX Assert that the full path back to genesis is available in\n            // blockchain.path. When the chain grows very long, it makes no\n            // sense to keep the full path in memory.\n            if (this._blockchain.path.length !== this._blockchain.height) {\n                throw 'Blockchain.path.length != Blockchain.height';\n            }\n\n            startIndex = 0;\n        }\n\n        // Collect up to 500 inventory vectors for the blocks starting right\n        // after the identified block on the main chain.\n        const stopIndex = Math.min(mainPath.length - 1, startIndex + 500);\n        const vectors = [];\n        for (let i = startIndex + 1; i <= stopIndex; ++i) {\n            vectors.push(new InvVector(InvVector.Type.BLOCK, mainPath[i]));\n        }\n\n        // Send the vectors back to the requesting peer.\n        this._peer.channel.inv(vectors);\n    }\n\n    async _onMempool(msg) {\n        // Query mempool for transactions\n        const transactions = await this._mempool.getTransactions();\n\n        // Send transactions back to sender.\n        for (let tx of transactions) {\n            this._peer.channel.tx(tx);\n        }\n    }\n\n    _onClose() {\n        // Clear all timers and intervals when the peer disconnects.\n        this._timers.clearAll();\n\n        this.fire('close', this);\n    }\n\n    get peer() {\n        return this._peer;\n    }\n\n    get synced() {\n        return this._synced;\n    }\n}\nClass.register(ConsensusAgent);\n","class Policy {\n    static get SATOSHIS_PER_COIN() {\n        return 1e8;\n    }\n\n    static get BLOCK_TIME() {\n        return 30;\n        /* in seconds */\n    }\n\n    static get BLOCK_REWARD() {\n        return Policy.coinsToSatoshis(50);\n    }\n\n    static get BLOCK_SIZE_MAX() {\n        return 1e6; // 1 MB\n    }\n\n    static get BLOCK_TARGET_MAX() {\n        return BlockUtils.compactToTarget(0x1f00ffff); // 16 zero bits, bitcoin uses 32 (0x1d00ffff)\n    }\n\n    static get DIFFICULTY_ADJUSTMENT_BLOCKS() {\n        return 5; // Blocks\n    }\n\n    static coinsToSatoshis(coins) {\n        return coins * Policy.SATOSHIS_PER_COIN;\n    }\n\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n}\nClass.register(Policy);\n","class Miner extends Observable {\n    constructor(blockchain, mempool, minerAddress) {\n        super();\n        this._blockchain = blockchain;\n        this._mempool = mempool;\n        this._address = minerAddress;\n\n        // Number of hashes computed since the last hashrate update.\n        this._hashCount = 0;\n\n        // Timestamp of the last hashrate update.\n        this._lastHashrate = 0;\n\n        // Hashrate computation interval handle.\n        this._hashrateWorker = null;\n\n        // The current hashrate of this miner.\n        this._hashrate = 0;\n\n        // Listen to changes in the mempool which evicts invalid transactions\n        // after every blockchain head change and then fires 'transactions-ready'\n        // when the eviction process finishes. Restart work on the next block\n        // with fresh transactions when this fires.\n        this._mempool.on('transactions-ready', () => this._startWork());\n\n        // Immediately start processing transactions when they come in.\n        this._mempool.on('transaction-added', () => this._startWork());\n    }\n\n    startWork() {\n        if (this.working) {\n            console.warn('Miner already working');\n            return;\n        }\n\n        // Initialize hashrate computation.\n        this._hashCount = 0;\n        this._lastHashrate = Date.now();\n        this._hashrateWorker = setInterval(() => this._updateHashrate(), 5000);\n\n        // Tell listeners that we've started working.\n        this.fire('start', this);\n\n        // Kick off the mining process.\n        this._startWork();\n    }\n\n    async _startWork() {\n        // XXX Needed as long as we cannot unregister from transactions-ready events.\n        if (!this.working) {\n            return;\n        }\n\n        // Construct next block.\n        const block = await this._getNextBlock();\n        const buffer = block.header.serialize();\n\n        console.log('Miner starting work on ' + block.header + ', transactionCount=' + block.transactionCount + ', hashrate=' + this._hashrate + ' H/s');\n\n        // Start hashing.\n        this._mine(block, buffer);\n    }\n\n\n    async _mine(block, buffer) {\n        // Abort mining if the blockchain head changed.\n        if (!this._blockchain.headHash.equals(block.prevHash)) {\n            return;\n        }\n\n        // Abort mining if the user stopped the miner.\n        if (!this.working) {\n            return;\n        }\n\n        // Reset the write position of the buffer before re-using it.\n        buffer.writePos = 0;\n\n        // Compute hash and check if it meets the proof of work condition.\n        const isPoW = await block.header.verifyProofOfWork(buffer);\n\n        // Keep track of how many hashes we have computed.\n        this._hashCount++;\n\n        // Check if we have found a block.\n        if (isPoW) {\n            // Tell listeners that we've mined a block.\n            this.fire('block-mined', block, this);\n\n            // Push block into blockchain.\n            this._blockchain.pushBlock(block);\n        } else {\n            // Increment nonce.\n            block.header.nonce++;\n\n            // Continue mining.\n            this._mine(block, buffer);\n        }\n    }\n\n    async _getNextBlock() {\n        const body = await this._getNextBody();\n        const header = await this._getNextHeader(body);\n        return new Block(header, body);\n    }\n\n    async _getNextHeader(body) {\n        const prevHash = await this._blockchain.headHash;\n        const accountsHash = await this._blockchain.accountsHash();\n        const bodyHash = await body.hash();\n        const timestamp = this._getNextTimestamp();\n        const nBits = await this._blockchain.getNextCompactTarget();\n        const nonce = Math.round(Math.random() * 100000);\n        return new BlockHeader(prevHash, bodyHash, accountsHash, nBits, timestamp, nonce);\n    }\n\n    async _getNextBody() {\n        // Get transactions from mempool (default is maxCount=5000).\n        // TODO Completely fill up the block with transactions until the size limit is reached.\n        const transactions = await this._mempool.getTransactions();\n        return new BlockBody(this._address, transactions);\n    }\n\n    _getNextTimestamp() {\n        return Math.floor(Date.now() / 1000);\n    }\n\n    stopWork() {\n        // TODO unregister from blockchain head-changed events.\n\n        if (this._hashrateWorker) {\n            clearInterval(this._hashrateWorker);\n            this._hashrateWorker = null;\n        }\n\n        this._hashrate = 0;\n\n        // Tell listeners that we've stopped working.\n        this.fire('stop', this);\n\n        console.log('Miner stopped work');\n    }\n\n    _updateHashrate() {\n        const elapsed = (Date.now() - this._lastHashrate) / 1000;\n        this._hashrate = Math.round(this._hashCount / elapsed);\n\n        this._hashCount = 0;\n        this._lastHashrate = Date.now();\n\n        // Tell listeners about our new hashrate.\n        this.fire('hashrate-changed', this._hashrate, this);\n    }\n\n    get address() {\n        return this._address;\n    }\n\n    get working() {\n        return !!this._hashrateWorker;\n    }\n\n    get hashrate() {\n        return this._hashrate;\n    }\n}\nClass.register(Miner);\n","class Network extends Observable {\n    static get PEER_COUNT_DESIRED() {\n        return 12;\n    }\n\n    static get PEER_COUNT_MAX() {\n        return PlatformUtils.isBrowser() ? 15 : 50000;\n    }\n\n    constructor(blockchain) {\n        super();\n        this._blockchain = blockchain;\n        return this._init();\n    }\n\n    async _init() {\n        this._autoConnect = false;\n\n        this._peerCount = 0;\n        this._agents = {};\n\n        // All addresses we are currently connected to including our own address.\n        this._activeAddresses = {};\n        this._activeAddresses[NetworkUtils.myNetAddress()] = true;\n\n        // All peer addresses we know.\n        this._addresses = new PeerAddresses();\n\n        // Relay new addresses to peers.\n        this._addresses.on('addresses-added', addresses => {\n            for (let key in this._agents) {\n                this._agents[key].relayAddresses(addresses);\n            }\n        });\n\n        this._wsConnector = new WebSocketConnector();\n        this._wsConnector.on('connection', conn => this._onConnection(conn));\n        this._wsConnector.on('error', peerAddr => this._onError(peerAddr));\n\n        this._rtcConnector = await new WebRtcConnector();\n        this._rtcConnector.on('connection', conn => this._onConnection(conn));\n        this._rtcConnector.on('error', peerAddr => this._onError(peerAddr));\n\n        return this;\n    }\n\n    connect() {\n        this._autoConnect = true;\n\n        // Start connecting to peers.\n        this._checkPeerCount();\n    }\n\n    disconnect() {\n        this._autoConnect = false;\n\n        // Close all active connections.\n        for (let key in this._agents) {\n            this._agents[key].channel.close('manual network disconnect');\n        }\n    }\n\n    // XXX For testing\n    disconnectWebSocket() {\n        this._autoConnect = false;\n\n        // Close all websocket connections.\n        for (let key in this._agents) {\n            const agent = this._agents[key];\n            if (Services.isWebSocket(agent.peer.netAddress.services)) {\n                agent.channel.close('manual websocket disconnect');\n            }\n        }\n    }\n\n    _checkPeerCount() {\n        if (this._autoConnect && this._peerCount < Network.PEER_COUNT_DESIRED) {\n            // Pick a random peer address that we are not connected to yet.\n            let candidates = this._addresses.findByServices(Services.myServiceMask());\n            candidates = candidates.filter(addr => !this._activeAddresses[addr]);\n            const peerAddress = ArrayUtils.randomElement(candidates);\n\n            // If we are connected to all addresses we know, wait for more.\n            if (!peerAddress) {\n                console.warn('Not connecting to more peers - no addresses left');\n                return;\n            }\n\n            // Connect to this address.\n            this._connect(peerAddress);\n        }\n    }\n\n    _connect(peerAddress) {\n        console.log('Connecting to ' + peerAddress + ' (via ' + peerAddress.signalChannel + ')...');\n\n        if (Services.isWebSocket(peerAddress.services)) {\n            this._activeAddresses[peerAddress] = true;\n            this._wsConnector.connect(peerAddress);\n        } else if (Services.isWebRtc(peerAddress.services)) {\n            this._activeAddresses[peerAddress] = true;\n            this._rtcConnector.connect(peerAddress);\n        } else {\n            console.error('Cannot connect to ' + peerAddress + ' - neither WS nor RTC supported');\n            _onError(peerAddress);\n        }\n    }\n\n    _onConnection(conn) {\n        // Reject peer if we have reached max peer count.\n        if (this._peerCount >= Network.PEER_COUNT_MAX) {\n            conn.close('max peer count reached (' + this._maxPeerCount + ')');\n            return;\n        }\n\n        // Check if we already have a connection to the same remote host(+port).\n        if (this._agents[conn]) {\n            conn.close('duplicate connection');\n            return;\n        }\n\n        console.log('Connection established: ' + conn);\n\n        const channel = new PeerChannel(conn);\n        channel.on('signal', msg => this._onSignal(channel, msg));\n\n        const agent = new NetworkAgent(this._blockchain, this._addresses, channel);\n        agent.on('handshake', peer => this._onHandshake(peer));\n        agent.on('close', (peer, channel) => this._onClose(peer, channel));\n        agent.on('addr', () => this._onAddr());\n\n        // Store the agent for this connection.\n        this._agents[conn] = agent;\n    }\n\n    // Connection to this peer address failed.\n    _onError(peerAddr) {\n        console.warn('Connection to ' + peerAddr + ' failed');\n\n        // Remove peer address from addresses.\n        this._addresses.delete(peerAddr);\n        delete this._activeAddresses[peerAddr];\n\n        this._checkPeerCount();\n    }\n\n    // This peer channel was closed.\n    _onClose(peer, channel) {\n        // Remove all peer addresses that were reachable via this channel.\n        this._addresses.deleteBySignalChannel(channel);\n\n        // Remove agent.\n        delete this._agents[channel.connection];\n\n        // XXX TODO remove peer address from activeAddresses, even if the handshake didn't finish.\n\n        if (peer) {\n            // Mark this peer's address as inactive.\n            delete this._activeAddresses[peer.netAddress];\n\n            // Tell listeners that this peer has gone away.\n            this.fire('peer-left', peer);\n\n            // Decrement the peerCount.\n            this._peerCount--;\n\n            // Let listeners know that the peers changed.\n            this.fire('peers-changed');\n\n            console.log('[PEER-LEFT] ' + peer);\n        }\n\n        this._checkPeerCount();\n    }\n\n    // Handshake with this peer was successful.\n    _onHandshake(peer) {\n        // Store the net address of the peer to prevent duplicate connections.\n        this._activeAddresses[peer.netAddress] = true;\n\n        // Increment the peerCount.\n        this._peerCount++;\n\n        // Let listeners know about this peer.\n        this.fire('peer-joined', peer);\n\n        // Let listeners know that the peers changed.\n        this.fire('peers-changed');\n\n        console.log('[PEER-JOINED] ' + peer);\n    }\n\n    // A peer has sent us new addresses.\n    _onAddr() {\n        this._checkPeerCount();\n    }\n\n\n    /* Signaling */\n\n    _onSignal(channel, msg) {\n        if (msg.senderId === NetworkUtils.mySignalId()) {\n            console.warn('Received signal from myself to ' + msg.recipientId + ' on channel ' + channel.connection + ' (myId: ' + msg.senderId + '): ' + BufferUtils.toAscii(msg.payload));\n            return;\n        }\n\n        // If the signal is intented for us, pass it on to our WebRTC connector.\n        if (msg.recipientId === NetworkUtils.mySignalId()) {\n            this._rtcConnector.onSignal(channel, msg);\n        }\n        // Otherwise, try to forward the signal to the intented recipient.\n        else {\n            const peerAddress = this._addresses.findBySignalId(msg.recipientId);\n            if (!peerAddress) {\n                // TODO send reject/unreachable message/signal if we cannot forward the signal\n                console.warn('Failed to forward signal from ' + msg.senderId + ' to ' + msg.recipientId + ' - no route found', msg);\n                return;\n            }\n\n            // XXX PeerChannel API doesn't fit here, no need to re-create the message.\n            peerAddress.signalChannel.signal(msg.senderId, msg.recipientId, msg.payload);\n            console.log('Forwarding signal from ' + msg.senderId + ' to ' + msg.recipientId + ' (received on: ' + channel.connection + ', myId: ' + NetworkUtils.mySignalId() + '): ' + BufferUtils.toAscii(msg.payload));\n        }\n    }\n\n    get peerCount() {\n        return this._peerCount;\n    }\n\n    // XXX debug info\n    get peerCountWebSocket() {\n        return Object.keys(this._agents).reduce( (n, key) =>\n            n + (this._agents[key].channel.connection.protocol === PeerConnection.Protocol.WEBSOCKET), 0);\n    }\n    get peerCountWebRtc() {\n        return Object.keys(this._agents).reduce( (n, key) =>\n            n + (this._agents[key].channel.connection.protocol === PeerConnection.Protocol.WEBRTC), 0);\n    }\n\n    // XXX debug info\n    get bytesReceived() {\n        return Object.keys(this._agents).reduce( (n, key) => n + this._agents[key].channel.connection.bytesReceived, 0);\n    }\n\n    get bytesSent() {\n        return Object.keys(this._agents).reduce( (n, key) => n + this._agents[key].channel.connection.bytesSent, 0);\n    }\n}\nClass.register(Network);\n","class NetworkAgent extends Observable {\n    static get HANDSHAKE_TIMEOUT() {\n        return 10000; // ms\n    }\n\n    static get PING_TIMEOUT() {\n        return 10000; // ms\n    }\n\n    static get GETADDR_TIMEOUT() {\n        return 5000; // ms\n    }\n\n    static get CONNECTIVITY_INTERVAL() {\n        return 60000; // ms\n    }\n\n    static get ANNOUNCE_ADDR_INTERVAL() {\n        return 1000 * 60 * 3; // 3 minutes\n    }\n\n    constructor(blockchain, addresses, channel) {\n        super();\n        this._blockchain = blockchain;\n        this._addresses = addresses;\n        this._channel = channel;\n\n        // Flag indicating that we have completed handshake with the peer.\n        this._connected = false;\n\n        // The version message announced by the peer.\n        this._version = null;\n\n        // The peer object we create after the handshake completes.\n        this._peer = null;\n\n        // All addresses that we think the remote peer knows.\n        this._knownAddresses = {};\n\n        // Helper object to keep track of timeouts & intervals.\n        this._timers = new Timers();\n\n        // Listen to network/control messages from the peer.\n        channel.on('version',    msg => this._onVersion(msg));\n        channel.on('verack',     msg => this._onVerAck(msg));\n        channel.on('addr',       msg => this._onAddr(msg));\n        channel.on('getaddr',    msg => this._onGetAddr(msg));\n        channel.on('ping',       msg => this._onPing(msg));\n        channel.on('pong',       msg => this._onPong(msg));\n\n        // Clean up when the peer disconnects.\n        channel.on('close',      () => this._onClose());\n\n        // Initiate the protocol with the new peer.\n        this._handshake();\n    }\n\n\n    /* Public API */\n\n    relayAddresses(addresses) {\n        // Only relay addresses that the peer doesn't know yet.\n        // We also relay addresses that the peer might not be able to connect to (e.g. NodeJS -> Browser).\n        const unknownAddresses = addresses.filter(addr => !this._knownAddresses[addr]);\n        if (unknownAddresses.length) {\n            this._channel.addr(unknownAddresses);\n        }\n    }\n\n\n    /* Handshake */\n\n    async _handshake() {\n        // Kick off the handshake by telling the peer our version, network address & blockchain height.\n        this._channel.version(NetworkUtils.myNetAddress(), this._blockchain.height);\n\n        // Drop the peer if it doesn't acknowledge our version message.\n        this._timers.setTimeout('verack', () => this._channel.close('verack timeout'), NetworkAgent.HANDSHAKE_TIMEOUT);\n\n        // Drop the peer if it doesn't send us a version message.\n        this._timers.setTimeout('version', () => this._channel.close('version timeout'), NetworkAgent.HANDSHAKE_TIMEOUT);\n    }\n\n    async _onVersion(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) return;\n\n        console.log('[VERSION] startHeight=' + msg.startHeight);\n\n        // Reject duplicate version messages.\n        if (this._version) {\n            console.warn('Rejecting duplicate version message from ' + this._channel);\n            this._channel.reject('version', RejectMessage.Code.DUPLICATE);\n            return;\n        }\n\n        // TODO actually check version, services and stuff.\n\n        // Distance to self must always be zero.\n        if (msg.netAddress.distance !== 0) {\n            console.warn('Invalid version message from ' + this._channel + ' - distance != 0');\n            this._channel.close('invalid version');\n            return;\n        }\n\n        // Clear the version timeout.\n        this._timers.clearTimeout('version');\n\n        // Acknowledge the receipt of the version message.\n        this._channel.verack();\n\n        // Store the version message.\n        this._version = msg;\n    }\n\n    _onVerAck(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) return;\n\n        console.log('[VERACK]');\n\n        // Clear the version message timeout.\n        this._timers.clearTimeout('verack');\n\n        // Fail if the peer didn't send a version message first.\n        if (!this._version) {\n            this._channel.close('verack before version');\n            return;\n        }\n\n        // Handshake completed, connection established.\n        this._connected = true;\n\n        // Tell listeners about the new peer that connected.\n        this._peer = new Peer(\n            this._channel,\n            this._version.version,\n            this._version.netAddress,\n            this._version.startHeight\n        );\n        this.fire('handshake', this._peer, this);\n\n        // Remember that the peer has sent us this address.\n        this._knownAddresses[this._version.netAddress] = true;\n\n        // Store/Update the peer's netAddress.\n        this._addresses.push(this._channel, this._version.netAddress);\n\n        // Setup regular connectivity check.\n        // TODO randomize interval?\n        this._timers.setInterval('connectivity',\n            () => this._checkConnectivity(),\n            NetworkAgent.CONNECTIVITY_INTERVAL);\n\n        // Regularly announce our address.\n        this._timers.setInterval('announce-addr',\n            () => this._channel.addr([NetworkUtils.myNetAddress()]),\n            NetworkAgent.ANNOUNCE_ADDR_INTERVAL);\n\n        // Request new network addresses from the peer.\n        this._requestAddresses();\n    }\n\n\n    /* Addresses */\n\n    _requestAddresses() {\n        // Request addresses from peer.\n        this._channel.getaddr(Services.myServiceMask());\n\n        // If the peer doesn't send addresses within the specified timeout,\n        // fire the address event with empty addresses.\n        this._timers.setTimeout('getaddr', () => {\n            console.warn('Peer ' + this._channel + ' did not send addresses when asked for');\n            this.fire('addresses', [], this);\n        }, NetworkAgent.GETADDR_TIMEOUT);\n    }\n\n    async _onAddr(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) return;\n\n        console.log('[ADDR] ' + msg.addresses.length + ' addresses: ' + msg.addresses);\n\n        // Clear the getaddr timeout.\n        this._timers.clearTimeout('getaddr');\n\n        // Remember that the peer has sent us these addresses.\n        for (let addr of msg.addresses) {\n            this._knownAddresses[addr] = true;\n        }\n\n        // Put the new addresses in the address pool.\n        await this._addresses.push(this._channel, msg.addresses);\n\n        // Tell listeners that we have received new addresses.\n        this.fire('addr', msg.addresses, this);\n    }\n\n    _onGetAddr(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) return;\n\n        console.log('[GETADDR] serviceMask=' + msg.serviceMask);\n\n        // Find addresses that match the given serviceMask.\n        const addresses = this._addresses.findByServices(msg.serviceMask);\n\n        // TODO we could exclude the knowAddresses from the response.\n\n        // Send the addresses back to the peer.\n        this._channel.addr(addresses);\n    }\n\n\n    /* Connectivity Check */\n\n    _checkConnectivity() {\n        // Generate random nonce.\n        const nonce = Math.round(Math.random() * NumberUtils.UINT32_MAX);\n\n        // Send ping message to peer.\n        this._channel.ping(nonce);\n\n        // Drop peer if it doesn't answer with a matching pong message within the timeout.\n        this._timers.setTimeout('ping_' + nonce, () => this._channel.close('ping timeout'), NetworkAgent.PING_TIMEOUT);\n    }\n\n    _onPing(msg) {\n        // Make sure this is a valid message in our current state.\n        if (!this._canAcceptMessage(msg)) return;\n\n        console.log('[PING] nonce=' + msg.nonce);\n\n        // Respond with a pong message\n        this._channel.pong(msg.nonce);\n    }\n\n    _onPong(msg) {\n        console.log('[PONG] nonce=' + msg.nonce);\n\n        // Clear the ping timeout for this nonce.\n        this._timers.clearTimeout('ping_' + msg.nonce);\n    }\n\n    _onClose() {\n        // Clear all timers and intervals when the peer disconnects.\n        this._timers.clearAll();\n\n        // Tell listeners that the peer has disconnected.\n        this.fire('close', this._peer, this._channel, this);\n    }\n\n    _canAcceptMessage(msg) {\n        const isHandshakeMsg =\n            msg.type == Message.Type.VERSION\n            || msg.type == Message.Type.VERACK;\n\n        // We accept handshake messages only if we are not connected, all other\n        // messages otherwise.\n        const accept = isHandshakeMsg != this._connected;\n        if (!accept) {\n            console.warn('Discarding message from ' + this._channel\n                + ' - not acceptable in state connected=' + this._connected, msg);\n        }\n        return accept;\n    }\n\n    get channel() {\n        return this._channel;\n    }\n\n    get peer() {\n        return this._peer;\n    }\n}\nClass.register(NetworkAgent);\n","class Peer {\n    constructor(channel, version, netAddress, startHeight) {\n        this._channel = channel;\n        this._version = version;\n        this._netAddress = netAddress;\n        this._startHeight = startHeight;\n    }\n\n    get channel() {\n        return this._channel;\n    }\n\n    get version() {\n        return this._version;\n    }\n\n    get netAddress() {\n        return this._netAddress;\n    }\n\n    get startHeight() {\n        return this._startHeight;\n    }\n\n    equals(o) {\n        return o instanceof Peer\n            && this._channel.equals(o.channel)\n            && this._version === o.version\n            && this._netAddress.equals(o.netAddress);\n    }\n\n    toString() {\n        return \"Peer{channel=\" + this._channel + \", version=\" + this._version\n            + \", netAddress=\" + this._netAddress + \"}\";\n    }\n}\nClass.register(Peer);\n","class PeerAddresses extends Observable {\n    static get MAX_AGE_WEBSOCKET() {\n        return 1000 * 60 * 60 * 3; // 3 hours\n    }\n\n    static get MAX_AGE_WEBRTC() {\n        return 1000 * 60 * 10; // 10 minutes\n    }\n\n    static get MAX_DISTANCE() {\n        return 3;\n    }\n\n    static get CLEANUP_INTERVAL() {\n        return 1000 * 60 * 3; // 3 minutes\n    }\n\n    static get SEED_PEERS() {\n        return [\n            new NetAddress(Services.WEBSOCKET, Date.now(), \"alpacash.com\", 8080, 0, 0),\n            new NetAddress(Services.WEBSOCKET, Date.now(), \"nimiq1.styp-rekowsky.de\", 8080, 0, 0),\n            new NetAddress(Services.WEBSOCKET, Date.now(), \"nimiq2.styp-rekowsky.de\", 8080, 0, 0)\n        ];\n    }\n\n    constructor() {\n        super();\n        this._store = {};\n        this.push(null, PeerAddresses.SEED_PEERS);\n        this.push(null, NetworkUtils.myNetAddress());\n\n        // Setup cleanup interval.\n        setInterval(() => this._cleanup(), PeerAddresses.CLEANUP_INTERVAL);\n    }\n\n    push(channel, arg) {\n        const netAddresses = arg.length ? arg : [arg];\n        const newAddresses = [];\n\n        for (let addr of netAddresses) {\n            // Ignore addresses that are too old.\n            if (this._exceedsAge(addr)) {\n                console.log('Ignoring address ' + addr + ' - too old', addr);\n                continue;\n            }\n\n            const knownAddr = this._store[addr];\n\n            // Increment distance values for signaling addresses.\n            // XXX use a more robust condition here.\n            if (channel && addr.signalId) {\n                addr.distance++;\n\n                // Ignore addresses that exceed max distance.\n                if (addr.distance > PeerAddresses.MAX_DISTANCE) {\n                    console.log('Ignoring address ' + addr + ' - max distance exceeded', addr);\n                    continue;\n                }\n\n                // Ignore address if we already know a better route to this address.\n                // TODO save anyways to have a backup route?\n                if (knownAddr && knownAddr.distance < addr.distance) {\n                    //console.log('Ignoring address ' + addr + ' - better route exists', addr, knownAddr);\n                    continue;\n                }\n            }\n\n            // Check if we already know this address with a more recent timestamp.\n            if (knownAddr && knownAddr.timestamp > addr.timestamp) {\n                //console.log('Ignoring addr ' + addr + ' - older than existing one');\n                continue;\n            }\n\n            // Store the address.\n            this._store[addr] = new PeerAddress(addr, channel);\n            newAddresses.push(addr);\n        }\n\n        // Tell listeners that we learned new addresses.\n        if (newAddresses.length) {\n            this.fire('addresses-added', newAddresses, this);\n        }\n    }\n\n    findBySignalId(signalId) {\n        // XXX inefficient linear scan\n        for (let key in this._store) {\n            const addr = this._store[key];\n            if (addr.signalId === signalId) {\n                return addr;\n            }\n        }\n        return null;\n    }\n\n    findByServices(serviceMask) {\n        // XXX inefficient linear scan\n        const addresses = [];\n        for (let key in this._store) {\n            const addr = this._store[key];\n            if ((addr.services & serviceMask) !== 0) {\n                addresses.push(addr);\n            }\n        }\n        return addresses;\n    }\n\n    delete(peerAddress) {\n        delete this._store[peerAddress];\n    }\n\n    // Delete all webrtc-only peer addresses that are signalable over the given channel.\n    deleteBySignalChannel(channel) {\n        // XXX inefficient linear scan\n        for (let key in this._store) {\n            const addr = this._store[key];\n            if (addr.signalChannel && addr.signalChannel.equals(channel)\n                    && Services.isWebRtc(addr.services) && !Services.isWebSocket(addr.services)) {\n                console.log('Deleting peer address ' + addr + ' - signaling channel closing');\n                delete this._store[key];\n            }\n        }\n    }\n\n    _cleanup() {\n        // Delete all peer addresses that are older than MAX_AGE.\n        // Special case: don't delete addresses without timestamps (timestamp == 0)\n        for (let key in this._store) {\n            const addr = this._store[key];\n            if (addr.timestamp > 0 && this._exceedsAge(addr)) {\n                console.log('Deleting old peer address ' + addr);\n                delete this._store[key];\n            }\n        }\n    }\n\n    _exceedsAge(addr) {\n        const age = Date.now() - addr.timestamp;\n        return (Services.isWebRtc(addr.services) && age > PeerAddresses.MAX_AGE_WEBRTC)\n            || (Services.isWebSocket(addr.services) && age > PeerAddresses.MAX_AGE_WEBSOCKET);\n    }\n}\nClass.register(PeerAddresses);\n\nclass PeerAddress extends NetAddress {\n    constructor(netAddress, signalChannel) {\n        super(netAddress.services, netAddress.timestamp, netAddress.host,\n            netAddress.port, netAddress.signalId, netAddress.distance);\n        this._signalChannel = signalChannel;\n    }\n\n    get signalChannel() {\n        return this._signalChannel;\n    }\n}\nClass.register(PeerAddress);\n","class PeerChannel extends Observable {\n    constructor(connection) {\n        super();\n        this._conn = connection;\n        this._conn.on('message', msg => this._onMessage(msg));\n\n        // Forward specified events on the connection to listeners of this Observable.\n        this.bubble(this._conn, 'close', 'error');\n    }\n\n    _onMessage(rawMsg) {\n        let msg;\n        try {\n            msg = MessageFactory.parse(rawMsg);\n        } catch(e) {\n            // TODO Drop client if it keeps sending junk.\n            // TODO Bitcoin sends a reject message if the message can't be decoded.\n            // From the Bitcoin Reference:\n            //  \"Be careful of reject message feedback loops where two peers\n            //   each don’t understand each other’s reject messages and so keep\n            //   sending them back and forth forever.\"\n            console.log('Failed to parse message: ' + rawMsg, e);\n        }\n\n        if (!msg) return;\n\n        try {\n            this.fire(msg.type, msg, this);\n        } catch (e) {\n            console.log('Error while processing message: ' + msg, e);\n        }\n    }\n\n    _send(msg) {\n        this._conn.send(msg.serialize());\n    }\n\n    close(reason) {\n        this._conn.close(reason);\n    }\n\n    version(netAddress, startHeight) {\n        this._send(new VersionMessage(1, netAddress, startHeight));\n    }\n\n    verack() {\n        this._send(new VerAckMessage());\n    }\n\n    inv(vectors) {\n        this._send(new InvMessage(vectors));\n    }\n\n    notfound(vectors) {\n        this._send(new NotFoundMessage(vectors));\n    }\n\n    getdata(vectors) {\n        this._send(new GetDataMessage(vectors));\n    }\n\n    block(block) {\n        this._send(new BlockMessage(block));\n    }\n\n    tx(transaction) {\n        this._send(new TxMessage(transaction));\n    }\n\n    getblocks(hashes, hashStop = new Hash()) {\n        this._send(new GetBlocksMessage(hashes, hashStop));\n    }\n\n    mempool() {\n        this._send(new MempoolMessage());\n    }\n\n    reject(messageType, code, reason, extraData) {\n        this._send(new RejectMessage(messageType, code, reason, extraData));\n    }\n\n    addr(addresses) {\n        this._send(new AddrMessage(addresses));\n    }\n\n    getaddr(serviceMask) {\n        this._send(new GetAddrMessage(serviceMask));\n    }\n\n    ping(nonce) {\n        this._send(new PingMessage(nonce));\n    }\n\n    pong(nonce) {\n        this._send(new PongMessage(nonce));\n    }\n\n    signal(senderId, recipientId, payload) {\n        this._send(new SignalMessage(senderId, recipientId, payload));\n    }\n\n    equals(o) {\n        return o instanceof PeerChannel\n            && this._conn.equals(o.connection);\n    }\n\n    toString() {\n        return 'PeerChannel{conn=' + this._conn + '}';\n    }\n\n    get connection() {\n        return this._conn;\n    }\n\n}\nClass.register(PeerChannel);\n","class PeerConnection extends Observable {\n    constructor(nativeChannel, protocol, host, port) {\n        super();\n        this._channel = nativeChannel;\n\n        this._protocol = protocol;\n        this._host = host;\n        this._port = port;\n\n        this._bytesReceived = 0;\n        this._bytesSent = 0;\n\n        if (this._channel.on) {\n            this._channel.on('message', msg => this._onMessage(msg.data || msg));\n            this._channel.on('close', () => this.fire('close', this));\n            this._channel.on('error', e => this.fire('error', e, this));\n        } else {\n            this._channel.onmessage = msg => this._onMessage(msg.data || msg);\n            this._channel.onclose = () => this.fire('close', this);\n            this._channel.onerror = e => this.fire('error', e, this);\n        }\n    }\n\n    _onMessage(msg) {\n        // XXX Cleanup!\n        if (!PlatformUtils.isBrowser() || !(msg instanceof Blob)) {\n            this._bytesReceived += msg.byteLength || msg.length;\n            this.fire('message', msg, this);\n        } else {\n            // Browser only\n            // TODO FileReader is slow and this is ugly anyways. Improve!\n            const reader = new FileReader();\n            reader.onloadend = () => this._onMessage(new Uint8Array(reader.result));\n            reader.readAsArrayBuffer(msg);\n        }\n    }\n\n    send(msg) {\n        try {\n            this._channel.send(msg);\n            this._bytesSent += msg.byteLength || msg.length;\n        } catch (e) {\n            console.error('Failed to send data over ' + this, msg, this);\n        }\n    }\n\n    close(reason) {\n        console.log('Closing peer connection ' + this + (reason ? ' - ' + reason : ''));\n        this._channel.close();\n    }\n\n    equals(o) {\n        return o instanceof PeerConnection\n            && this.protocol === o.protocol\n            && this.host === o.host\n            && this.port === o.port;\n    }\n\n    toString() {\n        return 'PeerConnection{protocol=' + this._protocol + ', host=' + this._host + ', port=' + this._port + '}';\n    }\n\n    get protocol() {\n        return this._protocol;\n    }\n\n    get host() {\n        return this._host;\n    }\n\n    get port() {\n        return this._port;\n    }\n\n    get bytesReceived() {\n        return this._bytesReceived;\n    }\n\n    get bytesSent() {\n        return this._bytesSent;\n    }\n}\nPeerConnection.Protocol = {};\nPeerConnection.Protocol.WEBSOCKET = 'websocket';\nPeerConnection.Protocol.WEBRTC = 'webrtc';\nClass.register(PeerConnection);\n","// TODO V2: Store private key encrypted\nclass Wallet {\n\n    static async getPersistent(accounts, mempool) {\n        const db = new WalletStore();\n        let keys = await db.get('keys');\n        if (!keys) {\n            keys = await Crypto.generateKeys();\n            await db.put('keys', keys);\n        }\n        return await new Wallet(keys, accounts, mempool);\n    }\n\n    static async createVolatile(accounts, mempool) {\n        const keys = await Crypto.generateKeys();\n        return await new Wallet(keys, accounts, mempool);\n    }\n\n    constructor(keys, accounts, mempool) {\n        this._keys = keys;\n        this._accounts = accounts;\n        this._mempool = mempool;\n        return this._init();\n    }\n\n    async _init() {\n        this._publicKey = await Crypto.exportPublic(this._keys.publicKey);\n        this._address = await Crypto.exportAddress(this._keys.publicKey);\n        return this;\n    }\n\n    importPrivate(privateKey) {\n        return Crypto.importPrivate(privateKey);\n    }\n\n    exportPrivate() {\n        return Crypto.exportPrivate(this._keys.privateKey);\n    }\n\n    createTransaction(recipientAddr, value, fee, nonce) {\n        const transaction = new Transaction(this._publicKey, recipientAddr, value, fee, nonce);\n        return this._signTransaction(transaction);\n    }\n\n    async _signTransaction(transaction) {\n        return Crypto.sign(this._keys.privateKey, transaction.serializeContent())\n            .then(signature => {\n                transaction.signature = signature;\n                return transaction;\n            });\n    }\n\n    async transferFunds(recipientAddr, value, fee) {\n        await this.getBalance()\n            .then(balance => this.createTransaction(recipientAddr, value, fee, balance.nonce)\n                .then(transaction => this._mempool.pushTransaction(transaction)));\n    }\n\n    get address() {\n        return this._address;\n    }\n\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    async getBalance(accounts) {\n        return this._accounts.getBalance(this.address);\n    }\n}\nClass.register(Wallet);\n","class Block {\n    constructor(header, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(body instanceof BlockBody)) throw 'Malformed body';\n        this._header = header;\n        this._body = body;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, Block);\n        BlockHeader.cast(o._header);\n        BlockBody.cast(o._body);\n        return o;\n    }\n\n    static unserialize(buf) {\n        var header = BlockHeader.unserialize(buf);\n        var body = BlockBody.unserialize(buf);\n        return new Block(header, body);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._body.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._body.serializedSize;\n    }\n\n    get header() {\n        return this._header;\n    }\n\n    get body() {\n        return this._body;\n    }\n\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    get target() {\n        return this._header.target;\n    }\n\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    hash() {\n        return this._header.hash();\n    }\n}\n\n/* Genesis Block */\nBlock.GENESIS = new Block(\n    new BlockHeader(\n        new Hash(),\n        new Hash('Xmju8G32zjPl4m6U/ULB3Nyozs2BkVgX2k9fy5/HeEg='),\n        new Hash('cJ6AyISHokEeHuTfufIqhhSS0gxHZRUMDHlKvXD4FHw='),\n        BlockUtils.difficultyToCompact(1),\n        0,\n        0),\n    new BlockBody(new Address('kekkD0FSI5gu3DRVMmMHEOlKf1I'), [])\n);\n// Store hash for synchronous access\nBlock.GENESIS.hash().then(hash => {\n    Block.GENESIS.HASH = hash;\n    Object.freeze(Block.GENESIS);\n});\nClass.register(Block);\n","// TODO: verify values and nonces of senders\n// TODO: check state-root after revert\n// TODO V2: hide all private functions in constructor scope\nclass Accounts extends Observable {\n    static async getPersistent() {\n        const tree = await AccountsTree.getPersistent();\n        return new Accounts(tree);\n    }\n\n    static async createVolatile() {\n        const tree = await AccountsTree.createVolatile();\n        return new Accounts(tree);\n    }\n\n    constructor(accountsTree) {\n        super();\n        this._tree = accountsTree;\n\n        // Forward balance change events to listeners registered on this Observable.\n        this.bubble(this._tree, '*');\n    }\n\n    async commitBlock(block) {\n        const hash = await this.hash();\n        if (!block.accountsHash.equals(hash)) throw 'AccountsHash mismatch';\n\n        // TODO we should validate if the block is going to be applied correctly.\n\n        const treeTx = await this._tree.transaction();\n        await this._execute(treeTx, block, (a, b) => a + b);\n        return await treeTx.commit();\n    }\n\n    async revertBlock(block) {\n        const treeTx = await this._tree.transaction();\n        await this._execute(treeTx, block, (a, b) => a - b);\n        return await treeTx.commit();\n    }\n\n    getBalance(address) {\n        return this._tree.get(address);\n    }\n\n    async _execute(treeTx, block, operator) {\n        await this._executeTransactions(treeTx, block.body, operator);\n        await this._rewardMiner(treeTx, block.body, operator);\n    }\n\n    async _rewardMiner(treeTx, body, op) {\n          // Sum up transaction fees.\n        const txFees = body.transactions.reduce( (sum, tx) => sum + tx.fee, 0);\n        await this._updateBalance(treeTx, body.minerAddr, txFees + Policy.BLOCK_REWARD, op);\n    }\n\n    async _executeTransactions(treeTx, body, op) {\n        for (let tx of body.transactions) {\n            await this._executeTransaction(treeTx, tx, op);\n        }\n    }\n\n    async _executeTransaction(treeTx, tx, op) {\n        await this._updateSender(treeTx, tx, op);\n        await this._updateRecipient(treeTx, tx, op);\n    }\n\n    async _updateSender(treeTx, tx, op) {\n        const addr = await tx.senderAddr();\n        await this._updateBalance(treeTx, addr, -tx.value - tx.fee, op);\n    }\n\n    async _updateRecipient(treeTx, tx, op) {\n        await this._updateBalance(treeTx, tx.recipientAddr, tx.value, op);\n    }\n\n    async _updateBalance(treeTx, address, value, operator) {\n        // XXX If we don't find a balance, we assume the account is empty for now.\n        // TODO retrieve the account balance by asking the network.\n        let balance = await treeTx.get(address);\n        if (!balance) {\n            balance = new Balance();\n        }\n\n        const newValue = operator(balance.value, value);\n        if (newValue < 0) throw 'Balance Error!';\n\n        const newNonce = value < 0 ? operator(balance.nonce, 1) : balance.nonce;\n        if (newNonce < 0) throw 'Nonce Error!';\n\n        const newBalance = new Balance(newValue, newNonce);\n        await treeTx.put(address, newBalance);\n    }\n\n    hash() {\n        return this._tree.root();\n    }\n}\nClass.register(Accounts);\n","class AccountsTree extends Observable {\n    static async getPersistent() {\n        const store = AccountsTreeStore.getPersistent();\n        return await new AccountsTree(store);\n    }\n\n    static async createVolatile() {\n        const store = AccountsTreeStore.createVolatile();\n        return await new AccountsTree(store);\n    }\n\n    constructor(treeStore) {\n        super();\n        this._store = treeStore;\n        this._synchronizer = new Synchronizer();\n\n        // Initialize root node.\n        return this._initRoot();\n    }\n\n    async _initRoot() {\n        let rootKey = await this._store.getRootKey();\n        if (!rootKey) {\n            rootKey = await this._store.put(new AccountsTreeNode());\n            await this._store.setRootKey(rootKey);\n        }\n        return this;\n    }\n\n    put(address, balance, transaction) {\n        return new Promise((resolve, error) => {\n            this._synchronizer.push(_ => {\n                return this._put(address, balance, transaction);\n            }, resolve, error);\n        });\n    }\n\n    async _put(address, balance, transaction) {\n        transaction = transaction || this._store;\n\n        // Fetch the root node. This should never fail.\n        const rootKey = await transaction.getRootKey();\n        const rootNode = await transaction.get(rootKey);\n\n        // Insert balance into the tree at address.\n        await this._insert(transaction, rootNode, address, balance, []);\n\n        // Tell listeners that the balance of address has changed.\n        this.fire(address, balance, address);\n    }\n\n    async _insert(transaction, node, address, balance, rootPath) {\n        // Find common prefix between node and new address.\n        const commonPrefix = AccountsTree._commonPrefix(node.prefix, address);\n\n        // Cut common prefix off the new address.\n        address = address.subarray(commonPrefix.length);\n\n        // If the node prefix does not fully match the new address, split the node.\n        if (commonPrefix.length !== node.prefix.length) {\n            // Cut the common prefix off the existing node.\n            await transaction.delete(node);\n            node.prefix = node.prefix.slice(commonPrefix.length);\n            const nodeKey = await transaction.put(node);\n\n            // Insert the new account node.\n            const newChild = new AccountsTreeNode(address, balance);\n            const newChildKey = await transaction.put(newChild);\n\n            // Insert the new parent node.\n            const newParent = new AccountsTreeNode(commonPrefix);\n            newParent.putChild(node.prefix, nodeKey);\n            newParent.putChild(newChild.prefix, newChildKey);\n            const newParentKey = await transaction.put(newParent);\n\n            return await this._updateKeys(transaction, newParent.prefix, newParentKey, rootPath);\n        }\n\n        // If the remaining address is empty, we have found an (existing) node\n        // with the given address. Update the balance.\n        if (!address.length) {\n            // Delete the existing node.\n            await transaction.delete(node);\n\n            // Special case: If the new balance is the initial balance\n            // (i.e. balance=0, nonce=0), it is like the account never existed\n            // in the first place. Delete the node in this case.\n            if (Balance.INITIAL.equals(balance)) {\n                // We have already deleted the node, remove the subtree it was on.\n                return await this._prune(transaction, node.prefix, rootPath);\n            }\n\n            // Update the balance.\n            node.balance = balance;\n            const nodeKey = await transaction.put(node);\n\n            return await this._updateKeys(transaction, node.prefix, nodeKey, rootPath);\n        }\n\n        // If the node prefix matches and there are address bytes left, descend into\n        // the matching child node if one exists.\n        const childKey = node.getChild(address);\n        if (childKey) {\n            const childNode = await transaction.get(childKey);\n            rootPath.push(node);\n            return await this._insert(transaction, childNode, address, balance, rootPath);\n        }\n\n        // If no matching child exists, add a new child account node to the current node.\n        const newChild = new AccountsTreeNode(address, balance);\n        const newChildKey = await transaction.put(newChild);\n\n        await transaction.delete(node);\n        node.putChild(newChild.prefix, newChildKey);\n        const nodeKey = await transaction.put(node);\n\n        return await this._updateKeys(transaction, node.prefix, nodeKey, rootPath);\n    }\n\n    async _prune(transaction, prefix, rootPath) {\n        const rootKey = await transaction.getRootKey();\n\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            const node = rootPath[i];\n            let nodeKey = await transaction.delete(node);\n\n            node.removeChild(prefix);\n\n            // If the node has children left, update it and all keys on the\n            // remaining root path. Pruning finished.\n            // XXX Special case: We start with an empty root node. Don't delete it.\n            if (node.hasChildren() || nodeKey === rootKey) {\n                nodeKey = await transaction.put(node);\n                return await this._updateKeys(transaction, node.prefix, nodeKey, rootPath.slice(0, i));\n            }\n\n            // The node has no children left, continue pruning.\n            prefix = node.prefix;\n        }\n        return undefined;\n    }\n\n    async _updateKeys(transaction, prefix, nodeKey, rootPath) {\n        // Walk along the rootPath towards the root node starting with the\n        // immediate predecessor of the node specified by 'prefix'.\n        let i = rootPath.length - 1;\n        for (; i >= 0; --i) {\n            const node = rootPath[i];\n            await transaction.delete(node);\n\n            node.putChild(prefix, nodeKey);\n\n            nodeKey = await transaction.put(node);\n            prefix = node.prefix;\n        }\n\n        await transaction.setRootKey(nodeKey);\n        return nodeKey;\n    }\n\n    async get(address, transaction) {\n        transaction = transaction || this._store;\n\n        // Fetch the root node. This should never fail.\n        const rootKey = await transaction.getRootKey();\n        const rootNode = await transaction.get(rootKey);\n\n        return await this._retrieve(transaction, rootNode, address);\n    }\n\n    async _retrieve(transaction, node, address) {\n        // Find common prefix between node and requested address.\n        const commonPrefix = AccountsTree._commonPrefix(node.prefix, address);\n\n        // If the prefix does not fully match, the requested address is not part\n        // of this node.\n        if (commonPrefix.length !== node.prefix.length) return false;\n\n        // Cut common prefix off the new address.\n        address = address.subarray(commonPrefix.length);\n\n        // If the address remaining address is empty, we have found the requested\n        // node.\n        if (!address.length) return node.balance;\n\n        // Descend into the matching child node if one exists.\n        const childKey = node.getChild(address);\n        if (childKey) {\n            const childNode = await transaction.get(childKey);\n            return await this._retrieve(transaction, childNode, address);\n        }\n\n        // No matching child exists, the requested address is not part of this node.\n        return false;\n    }\n\n    async transaction() {\n        const tx = await this._store.transaction();\n        const that = this;\n        return {\n            get: function (address) {\n                return that.get(address, tx);\n            },\n\n            put: function (address, balance) {\n                return that.put(address, balance, tx);\n            },\n\n            commit: function () {\n                return tx.commit();\n            }\n        };\n    }\n\n    static _commonPrefix(arr1, arr2) {\n        let commonPrefix = new Uint8Array(arr1.length);\n        let i = 0;\n        for (; i < arr1.length; ++i) {\n            if (arr1[i] !== arr2[i]) break;\n            commonPrefix[i] = arr1[i];\n        }\n        return commonPrefix.slice(0, i);\n    }\n\n    async root() {\n        const rootKey = await this._store.getRootKey();\n        return Hash.fromBase64(rootKey);\n    }\n}\nClass.register(AccountsTree);\n\nclass AccountsTreeNode {\n    constructor(prefix = new Uint8Array(), balance, children) {\n        this.prefix = prefix;\n        this.balance = balance;\n        this.children = children;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, AccountsTreeNode);\n        Balance.cast(o.balance);\n        return o;\n    }\n\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        const prefixLength = buf.readUint8();\n        const prefix = buf.read(prefixLength);\n\n        let balance = undefined;\n        let children = undefined;\n        if (type == 0xff) {\n            // Terminal node\n            balance = Balance.unserialize(buf);\n        } else {\n            // Branch node\n            children = [];\n            const childCount = buf.readUint8();\n            for (let i = 0; i < childCount; ++i) {\n                const childIndex = buf.readUint8();\n                const child = BufferUtils.toBase64(buf.read(32));\n                children[childIndex] = child;\n            }\n        }\n\n        return new AccountsTreeNode(prefix, balance, children);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        // node type: branch node = 0x00, terminal node = 0xff\n        buf.writeUint8(this.balance ? 0xff : 0x00);\n        // prefix length\n        buf.writeUint8(this.prefix.byteLength);\n        // prefix\n        buf.write(this.prefix);\n\n        if (this.balance) {\n            // terminal node\n            this.balance.serialize(buf);\n        } else if (this.children) {\n            // branch node\n            const childCount = this.children.reduce((count, val) => count + !!val, 0);\n            buf.writeUint8(childCount);\n            for (let i = 0; i < this.children.length; ++i) {\n                if (this.children[i]) {\n                    buf.writeUint8(i);\n                    buf.write(BufferUtils.fromBase64(this.children[i]));\n                }\n            }\n        }\n        return buf;\n    }\n\n    get serializedSize() {\n        return /*type*/ 1\n            + /*prefixLength*/ 1\n            + this.prefix.byteLength\n            + (this.balance ? this.balance.serializedSize : 0)\n            + (!this.balance ? /*childCount*/ 1 : 0)\n            // The children array contains undefined values for non existant children.\n            // Only count existing ones.\n            + (this.children ? this.children.reduce((count, val) => count + !!val, 0)\n                * (/*keySize*/ 32 + /*childIndex*/ 1) : 0);\n    }\n\n    getChild(prefix) {\n        return this.children && this.children[prefix[0]];\n    }\n\n    putChild(prefix, child) {\n        this.children = this.children || [];\n        this.children[prefix[0]] = child;\n    }\n\n    removeChild(prefix) {\n        if (this.children) delete this.children[prefix[0]];\n    }\n\n    hasChildren() {\n        return this.children && this.children.some(child => !!child);\n    }\n\n    hash() {\n        return Crypto.sha256(this.serialize());\n    }\n}\nClass.register(AccountsTreeNode);\n","class AccountsTreeStore {\n    static getPersistent() {\n        return new PersistentAccountsTreeStore();\n    }\n\n    static createVolatile() {\n        return new VolatileAccountsTreeStore();\n        //return new PersistentAccountsTreeStore();\n    }\n}\nClass.register(AccountsTreeStore);\n\nclass PersistentAccountsTreeStore extends ObjectDB {\n    constructor() {\n        super('accounts', AccountsTreeNode);\n    }\n\n    async getRootKey() {\n        return await ObjectDB.prototype.getString.call(this, 'root');\n    }\n\n    async setRootKey(rootKey) {\n        return await ObjectDB.prototype.putString.call(this, 'root', rootKey);\n    }\n\n    async transaction() {\n        const tx = await ObjectDB.prototype.transaction.call(this);\n        tx.getRootKey = function(rootKey) {\n            return tx.getString('root');\n        };\n        tx.setRootKey = function(rootKey) {\n            return tx.putString('root', rootKey);\n        };\n        return tx;\n    }\n}\n\nclass VolatileAccountsTreeStore {\n    constructor() {\n        this._store = {};\n        this._rootKey = undefined;\n    }\n\n    async key(node) {\n        return BufferUtils.toBase64(await node.hash());\n    }\n\n    get(key) {\n        return this._store[key];\n    }\n\n    async put(node) {\n        const key = await this.key(node);\n        this._store[key] = node;\n        return key;\n    }\n\n    async delete(node) {\n        const key = await this.key(node);\n        delete this._store[key];\n    }\n\n    transaction() {\n        const tx = this;\n        tx.commit = () => true;\n        return tx;\n    }\n\n    getRootKey() {\n        return this._rootKey;\n    }\n\n    setRootKey(rootKey) {\n        this._rootKey = rootKey;\n    }\n}\n","class Balance {\n    constructor(value = 0, nonce = 0) {\n        if (!NumberUtils.isUint64(value)) throw 'Malformed value';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        this._value = value;\n        this._nonce = nonce;\n    }\n\n    static cast(o) {\n        return ObjectUtils.cast(o, Balance);\n    }\n\n    static unserialize(buf) {\n        let value = buf.readUint64();\n        let nonce = buf.readUint32();\n        return new Balance(value, nonce);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint64(this._value);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    get serializedSize() {\n        return /*value*/ 8\n            + /*nonce*/ 4;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n\n    equals(o) {\n        return o instanceof Balance\n            && this._value === o.value\n            && this._nonce === o.nonce;\n    }\n}\nBalance.INITIAL = new Balance();\nClass.register(Balance);\n","class Blockchain extends Observable {\n    static async getPersistent(accounts) {\n        const store = BlockchainStore.getPersistent();\n        return await new Blockchain(store, accounts);\n    }\n\n    static async createVolatile(accounts) {\n        const store = BlockchainStore.createVolatile();\n        return await new Blockchain(store, accounts);\n    }\n\n    static get BLOCK_TIMESTAMP_DRIFT_MAX() {\n        return 1000 * 60 * 15; // 15 minutes\n    }\n\n    constructor(store, accounts) {\n        super();\n        this._store = store;\n        this._accounts = accounts;\n\n        this._mainChain = null;\n        this._mainPath = null;\n        this._headHash = null;\n\n        // Blocks arriving fast over the network will create a backlog of blocks\n        // in the synchronizer queue. Tell listeners when the blockchain is\n        // ready to accept blocks again.\n        this._synchronizer = new Synchronizer();\n        this._synchronizer.on('work-end', () => this.fire('ready', this));\n\n        return this._init();\n    }\n\n    async _init() {\n        // Load the main chain from storage.\n        this._mainChain = await this._store.getMainChain();\n\n        // If we don't know any chains, start with the genesis chain.\n        if (!this._mainChain) {\n            this._mainChain = new Chain(Block.GENESIS);\n            await this._store.put(this._mainChain);\n            await this._store.setMainChain(this._mainChain);\n        }\n\n        // Cache the hash of the head of the current main chain.\n        this._headHash = await this._mainChain.hash();\n\n        // Fetch the path along the main chain.\n        // XXX optimize this!\n        this._mainPath = await this._fetchPath(this.head);\n\n        // Automatically commit the chain head if the accountsHash matches.\n        // Needed to bootstrap the empty accounts tree.\n        const accountsHash = await this.accountsHash();\n        if (accountsHash.equals(this.head.accountsHash)) {\n            await this._accounts.commitBlock(this._mainChain.head);\n        } else {\n            // Assume that the accounts tree is in the correct state.\n            // TODO validate this?\n        }\n\n        return this;\n    }\n\n    // Retrieves up to maxBlocks predecessors of the given block.\n    // Returns an array of max (maxBlocks + 1) block hashes with the given hash\n    // as the last element.\n    async _fetchPath(block, maxBlocks = 1000000) {\n        let hash = await block.hash();\n        const path = [hash];\n\n        if (Block.GENESIS.HASH.equals(hash)) {\n            return new IndexedArray(path);\n        }\n\n        do {\n            const prevChain = await this._store.get(block.prevHash.toBase64());\n            if (!prevChain) throw 'Failed to find predecessor block ' + block.prevHash.toBase64();\n\n            // TODO unshift() is inefficient. We should build the array with push()\n            // instead and iterate over it in reverse order.\n            path.unshift(block.prevHash);\n\n            // Advance to the predecessor block.\n            hash = block.prevHash;\n            block = prevChain.head;\n        } while (--maxBlocks > 0 && !Block.GENESIS.HASH.equals(hash));\n\n        return new IndexedArray(path);\n    }\n\n    pushBlock(block) {\n        return new Promise( (resolve, error) => {\n            this._synchronizer.push( () => {\n                return this._pushBlock(block);\n            }, resolve, error);\n        });\n    }\n\n    async _pushBlock(block) {\n        // Check if we already know this block. If so, ignore it.\n        const hash = await block.hash();\n        const knownChain = await this._store.get(hash.toBase64());\n        if (knownChain) {\n            console.log('Blockchain ignoring known block ' + hash.toBase64());\n            return true;\n        }\n\n        // Retrieve the previous block. Fail if we don't know it.\n        const prevChain = await this._store.get(block.prevHash.toBase64());\n        if (!prevChain) {\n            console.log('Blockchain discarding block ' + hash.toBase64() + ' - previous block ' + block.prevHash.toBase64() + ' unknown');\n            return false;\n        }\n\n        // Check all intrinsic block invariants.\n        if (!await this._verifyBlock(block)) {\n            return false;\n        }\n\n        // Check that the block is a valid extension of its previous block.\n        if (!await this._isValidExtension(prevChain, block)) {\n            return false;\n        }\n\n        // Block looks good, compute the new total work & height.\n        const totalWork = prevChain.totalWork + block.difficulty;\n        const height = prevChain.height + 1;\n\n        // Store the new block.\n        const newChain = new Chain(block, totalWork, height);\n        await this._store.put(newChain);\n\n        // Check if the new block extends our current main chain.\n        if (block.prevHash.equals(this._headHash)) {\n            // Append new block to the main chain.\n            await this._extend(newChain);\n\n            // Tell listeners that the head of the chain has changed.\n            this.fire('head-changed', this.head);\n\n            return true;\n        }\n\n        // Otherwise, check if the new chain is harder than our current main chain.\n        // TODO Compare timestamp if totalWork is equal.\n        if (newChain.totalWork > this.totalWork) {\n            // A fork has become the hardest chain, rebranch to it.\n            await this._rebranch(newChain);\n\n            // Tell listeners that the head of the chain has changed.\n            this.fire('head-changed', this.head);\n\n            return true;\n        }\n\n        // Otherwise, we are creating/extending a fork. We have stored the block,\n        // the head didn't change, nothing else to do.\n        console.log('Creating/extending fork with block ' + hash.toBase64()\n            + ', height=' + newChain.height + ', totalWork='\n            + newChain.totalWork);\n\n        return true;\n    }\n\n    async _verifyBlock(block) {\n        // Check that the maximum block size is not exceeded.\n        if (block.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            console.warn('Blockchain rejected block - max block size exceeded');\n            return false;\n        }\n\n        // XXX Check that there is only one transaction per sender per block.\n        const senderPubKeys = {};\n        for (let tx of block.body.transactions) {\n            if (senderPubKeys[tx.senderPubKey]) {\n                console.warn('Blockchain rejected block - more than one transaction per sender');\n                return false;\n            }\n            senderPubKeys[tx.senderPubKey] = true;\n        }\n\n        // Verify that the block's timestamp is not too far in the future.\n        // TODO Use network-adjusted time (see https://en.bitcoin.it/wiki/Block_timestamp).\n        if (block.header.timestamp > Date.now() + Blockchain.BLOCK_TIMESTAMP_DRIFT_MAX) {\n            console.warn('Blockchain rejected block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the headerHash matches the difficulty.\n        if (!await block.header.verifyProofOfWork()) {\n            console.warn('Blockchain rejected block - PoW verification failed');\n            return false;\n        }\n\n        // Check that header bodyHash matches the actual bodyHash.\n        const bodyHash = await block.body.hash();\n        if (!block.header.bodyHash.equals(bodyHash)) {\n            console.warn('Blockchain rejecting block - body hash mismatch');\n            return false;\n        }\n\n        // Check that all transaction signatures are valid.\n        for (let tx of block.body.transactions) {\n            if (!await tx.verifySignature()) {\n                console.warn('Blockchain rejected block - invalid transaction signature');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    async _isValidExtension(chain, block) {\n        // Check that the difficulty matches.\n        const nextCompactTarget = await this.getNextCompactTarget(chain);\n        if (nextCompactTarget !== block.nBits) {\n            console.warn('Blockchain rejecting block - difficulty mismatch');\n            return false;\n        }\n\n        // Check that the timestamp is after (or equal) the previous block's timestamp.\n        if (chain.head.timestamp > block.timestamp) {\n            console.warn('Blockchain rejecting block - timestamp mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    async _extend(newChain) {\n        // Validate that the block matches the current account state.\n        // XXX This is also enforced by Accounts.commitBlock()\n        const accountsHash = await this.accountsHash();\n        if (!accountsHash.equals(newChain.head.accountsHash)) {\n            // AccountsHash mismatch. This can happen if someone gives us an\n            // invalid block. TODO error handling\n            console.log('Blockchain rejecting block, AccountsHash mismatch: current='\n                + accountsHash + ', block=' + newChain.head.accountsHash);\n            return;\n        }\n\n        // AccountsHash matches, commit the block.\n        await this._accounts.commitBlock(newChain.head);\n\n        // Update main chain.\n        const hash = await newChain.hash();\n        this._mainChain = newChain;\n        this._mainPath.push(hash);\n        this._headHash = hash;\n        await this._store.setMainChain(this._mainChain);\n    }\n\n    async _revert() {\n        // Revert the head block of the main chain.\n        await this._accounts.revertBlock(this.head);\n\n        // XXX Sanity check: Assert that the accountsHash now matches the\n        // accountsHash of the current head.\n        const accountsHash = await this._accounts.hash();\n        if (!accountsHash.equals(this.head.accountsHash)) {\n            throw 'Failed to revert main chain - inconsistent state';\n        }\n\n        // Load the predecessor chain.\n        const prevHash = this.head.prevHash;\n        const prevChain = await this._store.get(prevHash.toBase64());\n        if (!prevChain) throw 'Failed to find predecessor block ' + prevHash.toBase64() + ' while reverting';\n\n        // Update main chain.\n        this._mainChain = prevChain;\n        this._mainPath.pop();\n        this._headHash = prevHash;\n        await this._store.setMainChain(this._mainChain);\n    }\n\n    async _rebranch(newChain) {\n        const hash = await newChain.hash();\n        console.log('Rebranching to fork ' + hash.toBase64() + ', height='\n            + newChain.height + ', totalWork=' + newChain.totalWork, newChain);\n\n        // Find the common ancestor between our current main chain and the fork chain.\n        // Walk up the fork chain until we find a block that is part of the main chain.\n        // Store the chain along the way. In the worst case, this walks all the way\n        // up to the genesis block.\n        let forkHead = newChain.head;\n        const forkChain = [newChain];\n        while (this._mainPath.indexOf(forkHead.prevHash) < 0) {\n            const prevChain = await this._store.get(forkHead.prevHash.toBase64());\n            if (!prevChain) throw 'Failed to find predecessor block ' + forkHead.prevHash.toBase64() + ' while rebranching';\n\n            forkHead = prevChain.head;\n            forkChain.unshift(prevChain);\n        }\n\n        // The predecessor of forkHead is the desired common ancestor.\n        const commonAncestor = forkHead.prevHash;\n\n        console.log('Found common ancestor ' + commonAncestor.toBase64() + ' ' + forkChain.length + ' blocks up');\n\n        // Revert all blocks on the current main chain until the common ancestor.\n        while (!this.headHash.equals(commonAncestor)) {\n            await this._revert();\n        }\n\n        // We have reverted to the common ancestor state. Apply all blocks on\n        // the fork chain until we reach the new head.\n        for (let block of forkChain) {\n            await this._extend(block);\n        }\n    }\n\n    async getBlock(hash) {\n        const chain = await this._store.get(hash.toBase64());\n        return chain ? chain.head : null;\n    }\n\n    async getNextCompactTarget(chain) {\n        chain = chain || this._mainChain;\n\n        // The difficulty is adjusted every DIFFICULTY_ADJUSTMENT_BLOCKS blocks.\n        if (chain.height % Policy.DIFFICULTY_ADJUSTMENT_BLOCKS == 0) {\n            // If the given chain is the main chain, get the last DIFFICULTY_ADJUSTMENT_BLOCKS\n            // blocks via this._mainChain, otherwise fetch the path.\n            let startHash;\n            if (chain === this._mainChain) {\n                const startHeight = Math.max(chain.height - Policy.DIFFICULTY_ADJUSTMENT_BLOCKS, 0);\n                startHash = this._mainPath[startHeight];\n            } else {\n                const path = await this._fetchPath(chain.head, Policy.DIFFICULTY_ADJUSTMENT_BLOCKS - 1);\n                startHash = path[0];\n            }\n\n            // Compute the actual time it took to mine the last DIFFICULTY_ADJUSTMENT_BLOCKS blocks.\n            const startChain = await this._store.get(startHash.toBase64());\n            const actualTime = chain.head.timestamp - startChain.head.timestamp;\n\n            // Compute the target adjustment factor.\n            const expectedTime = Policy.DIFFICULTY_ADJUSTMENT_BLOCKS * Policy.BLOCK_TIME;\n            let adjustment = actualTime / expectedTime;\n\n            // Clamp the adjustment factor to [0.25, 4].\n            adjustment = Math.max(adjustment, 0.25);\n            adjustment = Math.min(adjustment, 4);\n\n            // Compute the next target.\n            const currentTarget = chain.head.target;\n            let nextTarget = currentTarget * adjustment;\n\n            // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n            // Also enforce a minimum target of 1.\n            nextTarget = Math.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n            nextTarget = Math.max(nextTarget, 1);\n\n            return BlockUtils.targetToCompact(nextTarget);\n        }\n\n        // If the difficulty is not adjusted at this height, the next difficulty\n        // is the current difficulty.\n        return chain.head.nBits;\n    }\n\n    get head() {\n        return this._mainChain.head;\n    }\n\n    get totalWork() {\n        return this._mainChain.totalWork;\n    }\n\n    get height() {\n        return this._mainChain.height;\n    }\n\n    get headHash() {\n        return this._headHash;\n    }\n\n    get path() {\n        return this._mainPath;\n    }\n\n    get busy() {\n        return this._synchronizer.working;\n    }\n\n    accountsHash() {\n        return this._accounts.hash();\n    }\n}\nClass.register(Blockchain);\n\nclass Chain {\n    constructor(head, totalWork, height = 1) {\n        this._head = head;\n        this._totalWork = totalWork ? totalWork : head.difficulty;\n        this._height = height;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, Chain);\n        Block.cast(o._head);\n        return o;\n    }\n\n    static unserialize(buf) {\n        const head = Block.unserialize(buf);\n        const totalWork = buf.readUint64();\n        const height = buf.readUint32();\n        return new Chain(head, totalWork, height);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._head.serialize(buf);\n        buf.writeUint64(this._totalWork);\n        buf.writeUint32(this._height);\n        return buf;\n    }\n\n    get serializedSize() {\n        return this._head.serializedSize\n            + /*totalWork*/ 8\n            + /*height*/ 4;\n    }\n\n    get head() {\n        return this._head;\n    }\n\n    get totalWork() {\n        return this._totalWork;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    hash() {\n        return this._head.hash();\n    }\n}\nClass.register(Chain);\n","class BlockchainStore {\n    static getPersistent() {\n        return new PersistentBlockchainStore();\n    }\n\n    static createVolatile() {\n        return new VolatileBlockchainStore();\n    }\n}\n\nclass PersistentBlockchainStore extends ObjectDB {\n    constructor() {\n        super('blocks', Chain);\n    }\n\n    async getMainChain() {\n        const key = await ObjectDB.prototype.getString.call(this, 'main');\n        if (!key) return undefined;\n        return ObjectDB.prototype.getObject.call(this, key);\n    }\n\n    async setMainChain(mainChain) {\n        const key = await this.key(mainChain);\n        return await ObjectDB.prototype.putString.call(this, 'main', key);\n    }\n}\n\nclass VolatileBlockchainStore {\n    constructor() {\n        this._store = {};\n        this._mainChain = null;\n    }\n\n    async key(value) {\n        return BufferUtils.toBase64(await value.hash());\n    }\n\n    get(key) {\n        return this._store[key];\n    }\n\n    async put(value) {\n        const key = await this.key(value);\n        this._store[key] = value;\n        return key;\n    }\n\n    async delete(value) {\n        const key = await this.key(value);\n        delete this._store[key];\n    }\n\n    getMainChain() {\n        return this._mainChain;\n    }\n\n    setMainChain(chain) {\n        this._mainChain = chain;\n    }\n}\nClass.register(BlockchainStore);\n","class Mempool extends Observable {\n    constructor(blockchain, accounts) {\n        super();\n        this._blockchain = blockchain;\n        this._accounts = accounts;\n\n        // Our pool of transactions.\n        this._transactions = {};\n\n        // All public keys of transaction senders currently in the pool.\n        this._senderPubKeys = {};\n\n        // Listen for changes in the blockchain head to evict transactions that\n        // have become invalid.\n        blockchain.on('head-changed', () => this._evictTransactions());\n    }\n\n    async pushTransaction(transaction) {\n        // Check if we already know this transaction.\n        const hash = await transaction.hash();\n        if (this._transactions[hash]) {\n            console.log('Mempool ignoring known transaction ' + hash.toBase64());\n            return false;\n        }\n\n        // Fully verify the transaction against the current accounts state.\n        if (!await this._verifyTransaction(transaction)) {\n            return false;\n        }\n\n        // Only allow one transaction per senderPubKey at a time.\n        // TODO This is a major limitation!\n        if (this._senderPubKeys[transaction.senderPubKey]) {\n            console.warn('Mempool rejecting transaction - duplicate sender public key');\n            return false;\n        }\n        this._senderPubKeys[transaction.senderPubKey] = true;\n\n        // Transaction is valid, add it to the mempool.\n        this._transactions[hash] = transaction;\n\n        // Tell listeners about the new valid transaction we received.\n        this.fire('transaction-added', transaction);\n\n        return true;\n    }\n\n    // Currently not asynchronous, but might be in the future.\n    async getTransaction(hash) {\n        return this._transactions[hash];\n    }\n\n    // Currently not asynchronous, but might be in the future.\n    async getTransactions(maxCount = 5000) {\n        // TODO Add logic here to pick the \"best\" transactions.\n        const transactions = [];\n        for (let hash in this._transactions) {\n            if (transactions.length >= maxCount) break;\n            transactions.push(this._transactions[hash]);\n        }\n        return transactions;\n    }\n\n    async _verifyTransaction(transaction) {\n        // Verify transaction signature.\n        if (!await transaction.verifySignature()) {\n            console.warn('Mempool rejected transaction - invalid signature', transaction);\n            return false;\n        }\n\n        // Verify transaction balance.\n        return await this._verifyTransactionBalance(transaction);\n    }\n\n    async _verifyTransactionBalance(transaction, quiet) {\n        // Verify balance and nonce:\n        // - sender account balance must be greater or equal the transaction value + fee.\n        // - sender account nonce must match the transaction nonce.\n        const senderAddr = await transaction.senderAddr();\n        const senderBalance = await this._accounts.getBalance(senderAddr);\n        if (!senderBalance) {\n            if (!quiet) console.warn('Mempool rejected transaction - sender account unknown');\n            return false;\n        }\n\n        if (senderBalance.value < (transaction.value + transaction.fee)) {\n            if (!quiet) console.warn('Mempool rejected transaction - insufficient funds', transaction);\n            return false;\n        }\n\n        if (senderBalance.nonce !== transaction.nonce) {\n            if (!quiet) console.warn('Mempool rejected transaction - invalid nonce', transaction);\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    async _evictTransactions() {\n        // Evict all transactions from the pool that have become invalid due\n        // to changes in the account state (i.e. typically because the were included\n        // in a newly mined block). No need to re-check signatures.\n        for (let hash in this._transactions) {\n            const transaction = this._transactions[hash];\n            if (!await this._verifyTransactionBalance(transaction, true)) {\n                delete this._transactions[hash];\n                delete this._senderPubKeys[transaction.senderPubKey];\n            }\n        }\n\n        // Tell listeners that the pool has updated after a blockchain head change.\n        this.fire('transactions-ready');\n    }\n}\nClass.register(Mempool);\n","// TODO V2: Transactions may contain a payment reference such that the chain can prove existence of data\n// TODO V2: Copy 'serialized' to detach all outer references\nclass Transaction {\n    constructor(senderPubKey, recipientAddr, value, fee, nonce, signature) {\n        if (!(senderPubKey instanceof PublicKey)) throw 'Malformed senderPubKey';\n        if (!(recipientAddr instanceof Address)) throw 'Malformed recipientAddr';\n        if (!NumberUtils.isUint64(value) || value == 0) throw 'Malformed value';\n        if (!NumberUtils.isUint64(fee)) throw 'Malformed fee';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw 'Malformed signature';\n\n        // Note that the signature is NOT verified here.\n        // Callers must explicitly invoke verifySignature() to check it.\n\n        this._senderPubKey = senderPubKey;\n        this._recipientAddr = recipientAddr;\n        this._value = value;\n        this._fee = fee;\n        this._nonce = nonce;\n        this._signature = signature;\n    }\n\n    static cast(o) {\n        if (!o) return o;\n        ObjectUtils.cast(o, Transaction);\n        o._senderPubKey = new PublicKey(o._senderPubKey);\n        o._recipientAddr = new Address(o._recipientAddr);\n        o._signature = new Signature(o.signature);\n        return o;\n    }\n\n    static unserialize(buf) {\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipientAddr = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const nonce = buf.readUint32();\n        const signature = Signature.unserialize(buf);\n        return new Transaction(senderPubKey, recipientAddr, value, fee, nonce, signature);\n    }\n\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this.serializeContent(buf);\n        this._signature.serialize(buf);\n        return buf;\n    }\n\n    get serializedSize() {\n        return this.serializedContentSize\n            + this._signature.serializedSize;\n    }\n\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        this._senderPubKey.serialize(buf);\n        this._recipientAddr.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    get serializedContentSize() {\n        return this._senderPubKey.serializedSize\n            + this._recipientAddr.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*nonce*/ 4;\n    }\n\n    verifySignature() {\n        return Crypto.verify(this._senderPubKey, this._signature, this.serializeContent());\n    }\n\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        // TODO Think about this! This means that the signatures will not be\n        // captured by the proof of work!\n        return Crypto.sha256(this.serializeContent());\n    }\n\n    equals(o) {\n        return o instanceof Transaction\n            && this._senderPubKey.equals(o.senderPubKey)\n            && this._recipientAddr.equals(o.recipientAddr)\n            && this._value === o.value\n            && this._fee === o.fee\n            && this._nonce === o.nonce\n            && this._signature.equals(o.signature);\n    }\n\n    toString() {\n        return `Transaction{`\n            + `senderPubKey=${this._senderPubKey.toBase64()}, `\n            + `recipientAddr=${this._recipientAddr.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `nonce=${this._nonce}, `\n            + `signature=${this._signature.toBase64()}`\n            + `}`;\n    }\n\n    get senderPubKey() {\n        return this._senderPubKey;\n    }\n\n    senderAddr() {\n        return this._senderPubKey.toAddress();\n    }\n\n    get recipientAddr() {\n        return this._recipientAddr;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    get fee() {\n        return this._fee;\n    }\n\n    get nonce() {\n        return this._nonce;\n    }\n\n    get signature() {\n        return this._signature;\n    }\n\n    // Signature is set by the Wallet after signing a transaction.\n    set signature(sig) {\n        this._signature = sig;\n    }\n}\n\nClass.register(Transaction);\n","class MessageFactory {\n    static parse(buffer) {\n        const buf = new SerialBuffer(buffer);\n        const type = Message.peekType(buf);\n        const clazz = MessageFactory.CLASSES[type];\n        if (!clazz || !clazz.unserialize) throw 'Invalid message type: ' + type;\n        return clazz.unserialize(buf);\n    }\n}\nMessageFactory.CLASSES = {};\nMessageFactory.CLASSES[Message.Type.VERSION] = VersionMessage;\nMessageFactory.CLASSES[Message.Type.VERACK] = VerAckMessage;\nMessageFactory.CLASSES[Message.Type.INV] = InvMessage;\nMessageFactory.CLASSES[Message.Type.GETDATA] = GetDataMessage;\nMessageFactory.CLASSES[Message.Type.NOTFOUND] = NotFoundMessage;\nMessageFactory.CLASSES[Message.Type.BLOCK] = BlockMessage;\nMessageFactory.CLASSES[Message.Type.TX] = TxMessage;\nMessageFactory.CLASSES[Message.Type.GETBLOCKS] = GetBlocksMessage;\nMessageFactory.CLASSES[Message.Type.MEMPOOL] = MempoolMessage;\nMessageFactory.CLASSES[Message.Type.REJECT] = RejectMessage;\nMessageFactory.CLASSES[Message.Type.ADDR] = AddrMessage;\nMessageFactory.CLASSES[Message.Type.GETADDR] = GetAddrMessage;\nMessageFactory.CLASSES[Message.Type.PING] = PingMessage;\nMessageFactory.CLASSES[Message.Type.PONG] = PongMessage;\nMessageFactory.CLASSES[Message.Type.SIGNAL] = SignalMessage;\nClass.register(MessageFactory);\n"]}